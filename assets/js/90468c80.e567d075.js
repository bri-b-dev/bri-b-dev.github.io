"use strict";(self.webpackChunkbri_b_dev_github_io=self.webpackChunkbri_b_dev_github_io||[]).push([[7805],{3016:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var i=t(3390),r=t(4848),l=t(8453),a=t(7293);const o={slug:"springboot-fileupload-azure",title:"Streaming File Uploads nach Azure Blob Storage mit Spring Boot",authors:"brigitte",tags:["spring-boot","kotlin","java","azure","blob-storage","fileupload"],date:new Date("2025-01-20T00:00:00.000Z"),description:"Speicherschonende Verarbeitung gro\xdfer Uploads direkt in Azure Storage \u2013 ohne Zwischenspeicherung im RAM."},s=void 0,c={authorsImageUrls:[void 0]},d=[{value:"\u2699\ufe0f Setup",id:"\ufe0f-setup",level:2},{value:"Streaming Multipart Upload",id:"streaming-multipart-upload",level:3},{value:"\ud83d\udd0d Erweiterung: MIME-Type mit Tika ermitteln",id:"-erweiterung-mime-type-mit-tika-ermitteln",level:2},{value:"\ud83d\udce6 On-the-Fly-Kompression",id:"-on-the-fly-kompression",level:2},{value:"\ud83d\udea7 Stolpersteine",id:"-stolpersteine",level:2},{value:"\u2705 Best Practices",id:"-best-practices",level:2},{value:"\ud83d\udccc Fazit",id:"-fazit",level:2},{value:"Projekt-Setup (Gradle Kotlin DSL)",id:"projekt-setup-gradle-kotlin-dsl",level:2},{value:"Konfiguration: Azure Blob Container Client",id:"konfiguration-azure-blob-container-client",level:2},{value:"Utility: PeekableInputStream + MIME-Erkennung (Tika)",id:"utility-peekableinputstream--mime-erkennung-tika",level:2},{value:"Service: Streaming Upload mit optionaler On\u2011the\u2011fly\u2011GZIP",id:"service-streaming-upload-mit-optionaler-ontheflygzip",level:2},{value:"Controller: Minimal-API (Servlet Request durchreichen)",id:"controller-minimal-api-servlet-request-durchreichen",level:2},{value:"Fehlerbehandlung &amp; (optionaler) Rollback-Beispiel",id:"fehlerbehandlung--optionaler-rollback-beispiel",level:2},{value:"Test mit <code>curl</code>",id:"test-mit-curl",level:2},{value:"Sicherheits- &amp; Betriebsaspekte (Kurzchecklist)",id:"sicherheits---betriebsaspekte-kurzchecklist",level:2},{value:"FAQ",id:"faq",level:2},{value:"End-to-End Sequenz (vereinfachte Schritte)",id:"end-to-end-sequenz-vereinfachte-schritte",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Wer gro\xdfe Dateien (mehrere Gigabyte) \xfcber eine Webanwendung hochladen m\xf6chte, st\xf6\xdft schnell an Grenzen:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Klassische Multipart-Verarbeitung l\xe4dt alles in den Speicher oder auf die Platte."}),"\n",(0,r.jsx)(n.li,{children:"Uploads dauern lange und blockieren Threads."}),"\n",(0,r.jsx)(n.li,{children:"Fehler beim Upload f\xfchren zu inkonsistenten Datenst\xe4nden."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Mit einem ",(0,r.jsx)(n.strong,{children:"streamingbasierten Ansatz"})," k\xf6nnen Dateien direkt beim Upload in Azure Blob Storage geschrieben werden \u2013 ohne dass sie jemals im RAM oder auf der Platte zwischengespeichert werden."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-setup",children:"\u2699\ufe0f Setup"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Boot + Kotlin"})," als Basis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://commons.apache.org/proper/commons-fileupload/",children:(0,r.jsx)(n.code,{children:"commons-fileupload2-core"})})," f\xfcr das Streaming-Multipart-Parsing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Azure Blob Storage SDK"})," f\xfcr das Schreiben von Streams in Blobs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SAS-Tokens"})," f\xfcr scoped & zeitlich begrenzten Zugriff"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"streaming-multipart-upload",children:"Streaming Multipart Upload"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"val iterator = FileUploadStreaming.getItemIterator(request)\nwhile (iterator.hasNext()) {\n    val item = iterator.next()\n    if (!item.isFormField) {\n        val blobClient = containerClient.getBlobClient(item.name)\n        blobClient.getBlockBlobClient().upload(item.inputStream, item.size, true)\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udc49 Keine Datei landet auf der Platte oder im Arbeitsspeicher \u2013 der InputStream wird direkt nach Azure durchgereicht."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-erweiterung-mime-type-mit-tika-ermitteln",children:"\ud83d\udd0d Erweiterung: MIME-Type mit Tika ermitteln"}),"\n",(0,r.jsxs)(n.p,{children:["Oft reicht der vom Client mitgelieferte ",(0,r.jsx)(n.code,{children:"Content-Type"})," nicht. Um den ",(0,r.jsx)(n.strong,{children:"tats\xe4chlichen MIME-Type"})," zu bestimmen, kann ein ",(0,r.jsx)(n.strong,{children:"Custom InputStream"})," genutzt werden, der die ersten Bytes cached, damit ",(0,r.jsx)(n.a,{href:"https://tika.apache.org/",children:"Apache Tika"})," eine Erkennung vornehmen kann:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class TikaInputStream(private val source: InputStream) : InputStream() {\n    private val buffer = ByteArrayOutputStream()\n    private var replay: ByteArrayInputStream? = null\n    private var probed = false\n\n    override fun read(): Int {\n        val replayStream = replay\n        return if (replayStream != null) {\n            replayStream.read()\n        } else {\n            val b = source.read()\n            if (!probed && b != -1) buffer.write(b)\n            b\n        }\n    }\n\n    fun detectMimeType(): String {\n        if (!probed) {\n            probed = true\n            val bytes = buffer.toByteArray()\n            replay = ByteArrayInputStream(bytes)\n            return Tika().detect(bytes)\n        }\n        return "application/octet-stream"\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u26a1 Vorteil: MIME-Erkennung passiert ",(0,r.jsx)(n.strong,{children:"im Stream"}),", ohne dass die Datei vollst\xe4ndig eingelesen werden muss."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-on-the-fly-kompression",children:"\ud83d\udce6 On-the-Fly-Kompression"}),"\n",(0,r.jsxs)(n.p,{children:["F\xfcr bestimmte Datentypen lohnt sich ",(0,r.jsx)(n.strong,{children:"On-the-fly-Kompression"}),". Dabei wird der Upload-Stream direkt in einen ",(0,r.jsx)(n.code,{children:"GZIPOutputStream"})," verpackt, bevor er nach Azure wandert:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'val blobClient = containerClient.getBlobClient("${item.name}.gz")\nblobClient.getBlockBlobClient().upload(\n    GZIPOutputStream(item.inputStream),\n    item.size, // ggf. unbekannt, dann -1 und chunked upload verwenden\n    true\n)\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Spart massiv Speicherplatz und Bandbreite."}),"\n",(0,r.jsxs)(n.li,{children:["Sollte ",(0,r.jsx)(n.strong,{children:"optional"})," sein (z. B. abh\xe4ngig vom MIME-Type aus Tika)."]}),"\n",(0,r.jsx)(n.li,{children:"Achtung bei Bin\xe4rdateien (Videos, Bilder): hier bringt Kompression meist keinen Vorteil."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-stolpersteine",children:"\ud83d\udea7 Stolpersteine"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multipart-Parsing:"})," Streams m\xfcssen zuverl\xe4ssig geschlossen werden."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Content-Length:"})," Nicht immer vom Client geliefert \u2192 evtl. chunked Upload nutzen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Fehlerhandling:"})," Bei Upload-Abbruch m\xfcssen ggf. auch Metadaten zur\xfcckgerollt werden."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tika + Kompression:"})," Erkennung zuerst durchf\xfchren, danach ggf. komprimieren."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backpressure"}),": Uploads niemals puffern, sondern durchstreamen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Trennung von Metadaten & Storage"}),": eigene Services f\xfcr Verantwortlichkeiten."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SAS-Tokens"}),": mit Prefix-Scopes und kurzer Laufzeit generieren."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Kombination Tika + Kompression"}),": Nur komprimieren, wenn es wirklich Sinn ergibt."]}),"\n"]}),"\n",(0,r.jsx)(a.A,{type:"note",title:"Praxisnutzen",children:(0,r.jsx)(n.p,{children:"Diese Technik nutzen wir in Produktionssystemen, um Uploads im Terabyte-Bereich performant, sicher und kostenoptimiert zu verarbeiten."})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-fazit",children:"\ud83d\udccc Fazit"}),"\n",(0,r.jsxs)(n.p,{children:["Streaming Uploads sind in Spring Boot ",(0,r.jsx)(n.strong,{children:"machbar und produktionsreif"})," \u2013 und durch MIME-Erkennung sowie optionale On-the-fly-Kompression sogar noch flexibler.\nDas Resultat: ",(0,r.jsx)(n.strong,{children:"weniger Infrastrukturkosten, bessere Performance und h\xf6here Robustheit"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Komplettes, lauff\xe4higes Beispiel: Streaming-Multipart mit ",(0,r.jsx)(n.code,{children:"commons-fileupload2-core"}),", MIME-Erkennung via Apache Tika, optionale On\u2011the\u2011fly\u2011Kompression (GZIP) und Upload direkt in Azure Blob Storage \xfcber SAS \u2013 ",(0,r.jsx)(n.strong,{children:"ohne"})," RAM-/Disk-Puffer."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"projekt-setup-gradle-kotlin-dsl",children:"Projekt-Setup (Gradle Kotlin DSL)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"build.gradle.kts"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'plugins {\n    id("org.springframework.boot") version "3.3.0"\n    id("io.spring.dependency-management") version "1.1.5"\n    kotlin("jvm") version "1.9.24"\n    kotlin("plugin.spring") version "1.9.24"\n}\n\ngroup = "com.example"\nversion = "0.0.1"\njava.sourceCompatibility = JavaVersion.VERSION_17\n\nrepositories { mavenCentral() }\n\ndependencies {\n    implementation("org.springframework.boot:spring-boot-starter-web")\n\n    // Azure Blob Storage SDK v12\n    implementation("com.azure:azure-storage-blob:12.26.0")\n\n    // Streaming Multipart Parsing\n    implementation("org.apache.commons:commons-fileupload2-core:2.0.0-M1")\n\n    // Apache Tika f\xfcr MIME-Erkennung\n    implementation("org.apache.tika:tika-core:2.9.2")\n\n    // Jackson / Kotlin\n    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")\n    implementation(kotlin("reflect"))\n\n    testImplementation("org.springframework.boot:spring-boot-starter-test")\n}\n\ntasks.test { useJUnitPlatform() }\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Hinweis:"})," Versionen ggf. auf den aktuellen Stand bringen."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/resources/application.yaml"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"server:\n  tomcat:\n    max-swallow-size: -1 # verhindert Abbruch bei gro\xdfen Streams\n    max-http-form-post-size: -1\n\nazure:\n  storage:\n    # Vollqualifizierte SAS-URL des Containers, z. B.:\n    # https://<account>.blob.core.windows.net/<container>?sv=...&sig=...\n    containerSasUrl: ${AZURE_CONTAINER_SAS_URL:}\n\nupload:\n  compression:\n    enabled: true # globaler Schalter, kann pro Request \xfcberschrieben werden\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"konfiguration-azure-blob-container-client",children:"Konfiguration: Azure Blob Container Client"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/AzureStorageConfig.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload\n\nimport com.azure.storage.blob.BlobContainerClient\nimport com.azure.storage.blob.BlobContainerClientBuilder\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nclass AzureStorageConfig {\n    @Bean\n    @ConfigurationProperties(prefix = "azure.storage")\n    fun azureStorageProps() = AzureStorageProps()\n\n    @Bean\n    fun blobContainerClient(props: AzureStorageProps): BlobContainerClient =\n        BlobContainerClientBuilder()\n            .endpoint(props.containerSasUrl)\n            .buildClient()\n}\n\nclass AzureStorageProps {\n    /** Vollst\xe4ndige Container-SAS-URL inkl. Token */\n    lateinit var containerSasUrl: String\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"utility-peekableinputstream--mime-erkennung-tika",children:"Utility: PeekableInputStream + MIME-Erkennung (Tika)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/io/PeekableInputStream.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"package com.example.upload.io\n\nimport java.io.BufferedInputStream\nimport java.io.InputStream\n\n/**\n * Wrappt einen InputStream, erlaubt Peek via mark/reset ohne volles Einlesen.\n */\nclass PeekableInputStream(source: InputStream, private val peekBufferSize: Int = 8192) : InputStream() {\n    private val inBuf = if (source.markSupported()) source else BufferedInputStream(source, peekBufferSize)\n\n    override fun read(): Int = inBuf.read()\n    override fun read(b: ByteArray, off: Int, len: Int): Int = inBuf.read(b, off, len)\n    override fun close() = inBuf.close()\n\n    fun <T> peek(peekLen: Int = peekBufferSize, block: (ByteArray) -> T): T {\n        inBuf.mark(peekLen)\n        val buf = ByteArray(peekLen)\n        val n = inBuf.read(buf)\n        inBuf.reset()\n        val slice = if (n <= 0) ByteArray(0) else buf.copyOf(n)\n        return block(slice)\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/mime/MimeDetector.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload.mime\n\nimport com.example.upload.io.PeekableInputStream\nimport org.apache.tika.Tika\n\nobject MimeDetector {\n    private val tika = Tika()\n\n    fun detect(peekable: PeekableInputStream, fallback: String = "application/octet-stream"): String =\n        peekable.peek { bytes ->\n            val detected = runCatching { tika.detect(bytes) }.getOrNull()\n            detected ?: fallback\n        }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"service-streaming-upload-mit-optionaler-ontheflygzip",children:"Service: Streaming Upload mit optionaler On\u2011the\u2011fly\u2011GZIP"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/UploadService.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload\n\nimport com.azure.storage.blob.BlobContainerClient\nimport com.azure.storage.blob.specialized.BlockBlobClient\nimport com.example.upload.io.PeekableInputStream\nimport com.example.upload.mime.MimeDetector\nimport org.apache.commons.fileupload2.core.FileItemInputIterator\nimport org.apache.commons.fileupload2.core.FileUpload\nimport org.apache.commons.fileupload2.core.FileUploadException\nimport org.apache.commons.fileupload2.core.RequestContext\nimport org.springframework.stereotype.Service\nimport java.io.InputStream\nimport java.util.zip.GZIPOutputStream\n\n@Service\nclass UploadService(private val container: BlobContainerClient) {\n\n    data class UploadResult(val files: List<FileInfo>)\n    data class FileInfo(\n        val fieldName: String,\n        val filename: String,\n        val size: Long?,\n        val mimeType: String,\n        val compressed: Boolean,\n        val blobName: String\n    )\n\n    /**\n     * Streamt Multipart-Dateien direkt nach Azure. Keine Zwischenpuffer/Tempfiles.\n     * @param request Spring/Servlet Request-Adapter f\xfcr FileUpload2\n     * @param forceCompression optionaler Override (Header/Param)\n     */\n    fun handleStreamingUpload(request: RequestContext, forceCompression: Boolean? = null): UploadResult {\n        try {\n            val iter: FileItemInputIterator = FileUpload().getItemIterator(request)\n            val uploaded = mutableListOf<FileInfo>()\n\n            while (iter.hasNext()) {\n                val item = iter.next()\n                if (item.isFormField) continue\n\n                val originalName = item.name ?: "upload.bin"\n                val field = item.fieldName ?: "file"\n                val size = item.headers?.getHeader("Content-Length")?.toLongOrNull()\n\n                // Eingangsstream peek-f\xe4hig machen\n                val peekable = PeekableInputStream(item.inputStream)\n                val mime = MimeDetector.detect(peekable)\n\n                val shouldCompress = forceCompression\n                    ?: shouldCompressMime(mime)\n\n                val (blobName, compressed) = if (shouldCompress) {\n                    val nameGz = "$originalName.gz"\n                    uploadStream(peekable, nameGz, compress = true)\n                    nameGz to true\n                } else {\n                    uploadStream(peekable, originalName, compress = false)\n                    originalName to false\n                }\n\n                uploaded += FileInfo(\n                    fieldName = field,\n                    filename = originalName,\n                    size = size,\n                    mimeType = mime,\n                    compressed = compressed,\n                    blobName = blobName\n                )\n            }\n\n            return UploadResult(uploaded)\n        } catch (e: FileUploadException) {\n            throw RuntimeException("Multipart parsing failed", e)\n        }\n    }\n\n    private fun shouldCompressMime(mime: String): Boolean {\n        // Heuristik: textuell = komprimieren\n        if (mime.startsWith("text/")) return true\n        return mime in setOf(\n            "application/json",\n            "application/xml",\n            "application/x-ndjson",\n            "text/csv",\n            "application/csv"\n        )\n    }\n\n    private fun uploadStream(input: InputStream, blobName: String, compress: Boolean) {\n        val client: BlockBlobClient = container.getBlobClient(blobName).blockBlobClient\n\n        // F\xfcr unbekannte L\xe4nge: \xfcber OutputStream schreiben (kein length n\xf6tig)\n        client.getBlobOutputStream(true).use { blobOut ->\n            if (compress) {\n                GZIPOutputStream(blobOut).use { gz ->\n                    input.copyTo(gz, DEFAULT_BUFFER)\n                    // GZIPOutputStream .close() schreibt den Footer\n                }\n            } else {\n                input.copyTo(blobOut, DEFAULT_BUFFER)\n            }\n        }\n    }\n\n    companion object { const val DEFAULT_BUFFER = 1024 * 1024 }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Wir nutzen ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"BlockBlobClient.getBlobOutputStream(overwrite = true)"})}),", damit keine Content-Length ben\xf6tigt wird. So bleibt der Upload vollst\xe4ndig streamingbasiert."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"controller-minimal-api-servlet-request-durchreichen",children:"Controller: Minimal-API (Servlet Request durchreichen)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/UploadController.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload\n\nimport org.apache.commons.fileupload2.core.RequestContext\nimport org.springframework.http.MediaType\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestHeader\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\nimport jakarta.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping("/api")\nclass UploadController(private val service: UploadService) {\n\n    @PostMapping("/upload", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])\n    fun upload(\n        request: HttpServletRequest,\n        @RequestHeader(name = "x-compress", required = false) compressHeader: String?\n    ): UploadService.UploadResult {\n        val forceCompression: Boolean? = compressHeader?.let { it.equals("true", ignoreCase = true) }\n\n        val ctx = object : RequestContext {\n            override fun getContentType(): String = request.contentType\n            override fun getContentLength(): Int = request.contentLength\n            override fun getCharacterEncoding(): String? = request.characterEncoding\n            override fun getInputStream() = request.inputStream\n        }\n\n        return service.handleStreamingUpload(ctx, forceCompression)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"fehlerbehandlung--optionaler-rollback-beispiel",children:"Fehlerbehandlung & (optionaler) Rollback-Beispiel"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern:"})," Metadaten und Blob getrennt verwalten. Erst Blob schreiben, dann Metadaten anlegen \u2013 oder umgekehrt, mit ",(0,r.jsx)(n.strong,{children:"Kompensationsaktion"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"try {\n    // 1) Blob/Upload\n    val result = service.handleStreamingUpload(ctx)\n\n    // 2) Metadaten an Backend senden\n    metadataClient.createFor(result.files)\n\n    return result\n} catch (ex: Exception) {\n    // Rollback-Strategie: evtl. angelegte Metadaten l\xf6schen\n    runCatching { metadataClient.rollback() }\n    throw ex\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"test-mit-curl",children:["Test mit ",(0,r.jsx)(n.code,{children:"curl"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8080/api/upload" \\\n  -H "x-compress: true" \\\n  -F "file=@./sample.csv" \\\n  -H "Expect:" # verhindert 100-continue Verz\xf6gerung\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"sicherheits---betriebsaspekte-kurzchecklist",children:"Sicherheits- & Betriebsaspekte (Kurzchecklist)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SAS-Token"}),": prefix-scoped (nur Zielpfad), kurze Laufzeit, nur ben\xf6tigte Rechte (Write/Create/Delete separat managen)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backpressure"}),": keine Puffer, keine Temporary Files; Tomcat-Limits (siehe ",(0,r.jsx)(n.code,{children:"application.yaml"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limits"}),": Server- und Proxy-Timeouts (AGIC/APIM) hoch genug einstellen."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observability"}),": Upload-Dauer, Bytes, Client-IP, MIME, Kompressionsflag loggen (ohne PII). Traces f\xfcr Fehlerpfade."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Whitelist erlaubter MIME-Types, Max-File-Size serverseitig (fr\xfchzeitig abbrechen), Virenscan je nach Bedarf."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Wie bestimme ich die Blob Content-Type/Encoding?"}),"\nWenn nicht komprimiert: setze ",(0,r.jsx)(n.code,{children:"Content-Type"})," \xfcber Blob-HTTP-Header/Metadata. Bei GZIP: ",(0,r.jsx)(n.code,{children:"Content-Encoding: gzip"})," setzen, optional Original-MIME als Benutzer-Metadatum speichern."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Beispiel:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'val block = container.getBlobClient(blobName).blockBlobClient\nval headers = com.azure.storage.blob.models.BlobHttpHeaders()\n    .setContentType("application/json")\n    .setContentEncoding("gzip")\nblock.setHttpHeaders(headers)\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"setHttpHeaders"})," kann nach dem Upload gesetzt werden (separater Call) \u2013 oder man nutzt ",(0,r.jsx)(n.code,{children:"beginUpload"}),"/",(0,r.jsx)(n.code,{children:"commitBlockList"})," mit Optionen."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Wie verhindere ich RAM-Spikes?"}),"\nBuffers klein halten (1\u20134 MB), ",(0,r.jsx)(n.code,{children:"copyTo"}),"-Buffer konstant. Keine ",(0,r.jsx)(n.code,{children:"ByteArrayOutputStream"}),"-Akkumulation."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Kann ich parallelisieren?"}),"\nF\xfcr reine Streaming-Endpunkte: eher nein (keine L\xe4nge). F\xfcr gro\xdfe bekannte Dateien kann ",(0,r.jsx)(n.code,{children:"ParallelTransferOptions"})," beim ",(0,r.jsx)(n.code,{children:"upload(InputStream, length)"})," sinnvoll sein."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"end-to-end-sequenz-vereinfachte-schritte",children:"End-to-End Sequenz (vereinfachte Schritte)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Client sendet Multipart \u2192 Server parsed Stream per FileUpload2."}),"\n",(0,r.jsx)(n.li,{children:"MIME-Erkennung via Peek (Tika)."}),"\n",(0,r.jsx)(n.li,{children:"Optional GZIP \u2192 Stream wird on-the-fly komprimiert."}),"\n",(0,r.jsx)(n.li,{children:"BlobOutputStream schreibt direkt nach Azure."}),"\n",(0,r.jsx)(n.li,{children:"Optional: HTTP-Header/Metadata setzen, Metadaten-Service aufrufen."}),"\n",(0,r.jsx)(n.li,{children:"Fehler \u2192 Kompensation (Rollback) ausl\xf6sen."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},3390:e=>{e.exports=JSON.parse('{"permalink":"/blog/springboot-fileupload-azure","source":"@site/blog/2025-01-20-springboot-fileupload-azure.md","title":"Streaming File Uploads nach Azure Blob Storage mit Spring Boot","description":"Speicherschonende Verarbeitung gro\xdfer Uploads direkt in Azure Storage \u2013 ohne Zwischenspeicherung im RAM.","date":"2025-01-20T00:00:00.000Z","tags":[{"inline":false,"label":"Spring Boot","permalink":"/blog/tags/spring-boot","description":"Spring Boot"},{"inline":false,"label":"Kotlin","permalink":"/blog/tags/kotlin","description":"Kotlin"},{"inline":false,"label":"Java","permalink":"/blog/tags/java","description":"Java"},{"inline":false,"label":"Azure","permalink":"/blog/tags/azure","description":"Azure"},{"inline":false,"label":"Blob Storage","permalink":"/blog/tags/blob-storage","description":"Blob Storage"},{"inline":false,"label":"Fileupload","permalink":"/blog/tags/fileupload","description":"Fileupload"}],"readingTime":7.79,"hasTruncateMarker":true,"authors":[{"name":"Brigitte B\xf6hm","title":"Cloud & Data Platform Engineer","url":"https://www.linkedin.com/in/brigitte-boehm-34b7a025","page":{"permalink":"/blog/authors/brigitte"},"socials":{"github":"https://github.com/bri-b-dev","linkedin":"https://www.linkedin.com/in/brigitte-boehm-34b7a025"},"imageURL":"https://github.com/bri-b-dev.png","key":"brigitte"}],"frontMatter":{"slug":"springboot-fileupload-azure","title":"Streaming File Uploads nach Azure Blob Storage mit Spring Boot","authors":"brigitte","tags":["spring-boot","kotlin","java","azure","blob-storage","fileupload"],"date":"2025-01-20T00:00:00.000Z","description":"Speicherschonende Verarbeitung gro\xdfer Uploads direkt in Azure Storage \u2013 ohne Zwischenspeicherung im RAM."},"unlisted":false,"prevItem":{"title":"AKS Node Selection: Physische Pools vs. Virtual Nodes","permalink":"/blog/aks-node-selection"},"nextItem":{"title":"Workload Identity in AKS \u2013 Lessons Learned","permalink":"/blog/workload-identity-lessons-learned"}}')},7293:(e,n,t)=>{t.d(n,{A:()=>U});var i=t(6540),r=t(4848);function l(e){const{mdxAdmonitionTitle:n,rest:t}=function(e){const n=i.Children.toArray(e),t=n.find(e=>i.isValidElement(e)&&"mdxAdmonitionTitle"===e.type),l=n.filter(e=>e!==t),a=t?.props.children;return{mdxAdmonitionTitle:a,rest:l.length>0?(0,r.jsx)(r.Fragment,{children:l}):null}}(e.children),l=e.title??n;return{...e,...l&&{title:l},children:t}}var a=t(4164),o=t(1312),s=t(7559);const c="admonition_xJq3",d="admonitionHeading_Gvgb",p="admonitionIcon_Rf37",u="admonitionContent_BuS1";function m({type:e,className:n,children:t}){return(0,r.jsx)("div",{className:(0,a.A)(s.G.common.admonition,s.G.common.admonitionType(e),c,n),children:t})}function h({icon:e,title:n}){return(0,r.jsxs)("div",{className:d,children:[(0,r.jsx)("span",{className:p,children:e}),n]})}function g({children:e}){return e?(0,r.jsx)("div",{className:u,children:e}):null}function b(e){const{type:n,icon:t,title:i,children:l,className:a}=e;return(0,r.jsxs)(m,{type:n,className:a,children:[i||t?(0,r.jsx)(h,{title:i,icon:t}):null,(0,r.jsx)(g,{children:l})]})}function x(e){return(0,r.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const f={icon:(0,r.jsx)(x,{}),title:(0,r.jsx)(o.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function j(e){return(0,r.jsx)(b,{...f,...e,className:(0,a.A)("alert alert--secondary",e.className),children:e.children})}function k(e){return(0,r.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const v={icon:(0,r.jsx)(k,{}),title:(0,r.jsx)(o.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function S(e){return(0,r.jsx)(b,{...v,...e,className:(0,a.A)("alert alert--success",e.className),children:e.children})}function z(e){return(0,r.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const B={icon:(0,r.jsx)(z,{}),title:(0,r.jsx)(o.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function C(e){return(0,r.jsx)(b,{...B,...e,className:(0,a.A)("alert alert--info",e.className),children:e.children})}function y(e){return(0,r.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const A={icon:(0,r.jsx)(y,{}),title:(0,r.jsx)(o.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function I(e){return(0,r.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const M={icon:(0,r.jsx)(I,{}),title:(0,r.jsx)(o.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const w={icon:(0,r.jsx)(y,{}),title:(0,r.jsx)(o.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const T={...{note:j,tip:S,info:C,warning:function(e){return(0,r.jsx)(b,{...A,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,r.jsx)(b,{...M,...e,className:(0,a.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,r.jsx)(j,{title:"secondary",...e}),important:e=>(0,r.jsx)(C,{title:"important",...e}),success:e=>(0,r.jsx)(S,{title:"success",...e}),caution:function(e){return(0,r.jsx)(b,{...w,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})}}};function U(e){const n=l(e),t=(i=n.type,T[i]||(console.warn(`No admonition component found for admonition type "${i}". Using Info as fallback.`),T.info));var i;return(0,r.jsx)(t,{...n})}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},l=i.createContext(r);function a(e){const n=i.useContext(l);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(l.Provider,{value:n},e.children)}}}]);