"use strict";(self.webpackChunkbri_b_dev_github_io=self.webpackChunkbri_b_dev_github_io||[]).push([[5294],{4986:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var i=t(7065),r=t(4848),o=t(8453),a=t(7293);const l={slug:"springboot-fileupload-azure",title:"Streaming File Uploads to Azure Blob Storage with Spring Boot",authors:"brigitte",tags:["spring-boot","kotlin","java","azure","blob-storage","fileupload"],date:new Date("2025-01-20T00:00:00.000Z"),description:"Memory-efficient processing of large uploads directly in Azure Storage\u2014without temporary storage in RAM."},s=void 0,c={authorsImageUrls:[void 0]},d=[{value:"\u2699\ufe0f Setup",id:"\ufe0f-setup",level:2},{value:"Streaming Multipart Upload",id:"streaming-multipart-upload",level:3},{value:"\ud83d\udd0d Extension: Determining MIME type with Tika",id:"-extension-determining-mime-type-with-tika",level:2},{value:"\ud83d\udce6 On-the-fly compression",id:"-on-the-fly-compression",level:2},{value:"\ud83d\udea7 Stumbling blocks",id:"-stumbling-blocks",level:2},{value:"\u2705 Best practices",id:"-best-practices",level:2},{value:"\ud83d\udccc Conclusion",id:"-conclusion",level:2},{value:"Project-Setup (Gradle Kotlin DSL)",id:"project-setup-gradle-kotlin-dsl",level:2},{value:"Configuration: Azure Blob Container Client",id:"configuration-azure-blob-container-client",level:2},{value:"Utility: PeekableInputStream + MIME detection (Tika)",id:"utility-peekableinputstream--mime-detection-tika",level:2},{value:"Service: Streaming upload with optional on-the-fly GZIP compression",id:"service-streaming-upload-with-optional-on-the-fly-gzip-compression",level:2},{value:"Controller: Minimal API (pass through servlet request)",id:"controller-minimal-api-pass-through-servlet-request",level:2},{value:"Error handling &amp; (optional) rollback example",id:"error-handling--optional-rollback-example",level:2},{value:"Test with <code>curl</code>",id:"test-with-curl",level:2},{value:"Security &amp; operational aspects (short checklist)",id:"security--operational-aspects-short-checklist",level:2},{value:"FAQ",id:"faq",level:2},{value:"End-to-end sequence (simplified steps)",id:"end-to-end-sequence-simplified-steps",level:2}];function p(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"Anyone who wants to upload large files (several gigabytes) via a web application quickly reaches their limits:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Classic multipart processing loads everything into memory or onto the disk."}),"\n",(0,r.jsx)(n.li,{children:"Uploads take a long time and block threads."}),"\n",(0,r.jsx)(n.li,{children:"Upload errors lead to inconsistent data states."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["With a ",(0,r.jsx)(n.strong,{children:"streaming-based approach"}),", files can be written directly to Azure Blob Storage during upload \u2013 without ever being cached in RAM or on disk."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"\ufe0f-setup",children:"\u2699\ufe0f Setup"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Spring Boot + Kotlin"})," as a Basis"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.a,{href:"https://commons.apache.org/proper/commons-fileupload/",children:(0,r.jsx)(n.code,{children:"commons-fileupload2-core"})})," for streaming multipart parsing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Azure Blob Storage SDK"})," for writing streams to blobs"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SAS tokens"})," for scoped & time-limited access"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"streaming-multipart-upload",children:"Streaming Multipart Upload"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"val iterator = FileUploadStreaming.getItemIterator(request)\nwhile (iterator.hasNext()) {\n    val item = iterator.next()\n    if (!item.isFormField) {\n        val blobClient = containerClient.getBlobClient(item.name)\n        blobClient.getBlockBlobClient().upload(item.inputStream, item.size, true)\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"\ud83d\udc49 No file is stored on the disk or in the working memory \u2013 the InputStream is passed directly to Azure."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-extension-determining-mime-type-with-tika",children:"\ud83d\udd0d Extension: Determining MIME type with Tika"}),"\n",(0,r.jsxs)(n.p,{children:["Often, the ",(0,r.jsx)(n.code,{children:"Content-Type"})," provided by the client is not sufficient. To determine the ",(0,r.jsx)(n.strong,{children:"actual MIME type"}),", a ",(0,r.jsx)(n.strong,{children:"Custom InputStream"})," can be used, which caches the first bytes so that ",(0,r.jsx)(n.a,{href:"https://tika.apache.org/",children:"Apache Tika"})," can perform recognition:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'class TikaInputStream(private val source: InputStream) : InputStream() {\n    private val buffer = ByteArrayOutputStream()\n    private var replay: ByteArrayInputStream? = null\n    private var probed = false\n\n    override fun read(): Int {\n        val replayStream = replay\n        return if (replayStream != null) {\n            replayStream.read()\n        } else {\n            val b = source.read()\n            if (!probed && b != -1) buffer.write(b)\n            b\n        }\n    }\n\n    fun detectMimeType(): String {\n        if (!probed) {\n            probed = true\n            val bytes = buffer.toByteArray()\n            replay = ByteArrayInputStream(bytes)\n            return Tika().detect(bytes)\n        }\n        return "application/octet-stream"\n    }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["\u26a1 Advantage: MIME detection happens ",(0,r.jsx)(n.strong,{children:"in the stream"})," without having to read the entire file."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-on-the-fly-compression",children:"\ud83d\udce6 On-the-fly compression"}),"\n",(0,r.jsxs)(n.p,{children:["For certain data types, ",(0,r.jsx)(n.strong,{children:"on-the-fly compression"})," is worthwhile. This involves packing the upload stream directly into a ",(0,r.jsx)(n.code,{children:"GZIPOutputStream"})," before it is transferred to Azure:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'val blobClient = containerClient.getBlobClient(\u201c${item.name}.gz")\nblobClient.getBlockBlobClient().upload(\n    GZIPOutputStream(item.inputStream),\n    item.size, // unknown if necessary, then use -1 and chunked upload\n    true)\n\n'})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Saves a lot of storage space and bandwidth."}),"\n",(0,r.jsxs)(n.li,{children:["Should be ",(0,r.jsx)(n.strong,{children:"optional"})," (e.g., depending on the MIME type from Tika)."]}),"\n",(0,r.jsx)(n.li,{children:"Caution with binary files (videos, images): compression usually does not offer any advantages here."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-stumbling-blocks",children:"\ud83d\udea7 Stumbling blocks"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multipart parsing:"})," Streams must be closed reliably."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Content length:"})," Not always delivered by the client \u2192 possibly use chunked upload."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Error handling:"})," If the upload is interrupted, metadata may also need to be rolled back."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Tika + compression:"})," Perform recognition first, then compress if necessary."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-best-practices",children:"\u2705 Best practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backpressure:"})," Never buffer uploads, but stream them through."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Separation of metadata & storage"}),": separate services for separate responsibilities."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SAS tokens"}),": generate with prefix scopes and short lifetime."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Combination of Tika + compression"}),": Only compress if it really makes sense."]}),"\n"]}),"\n",(0,r.jsx)(a.A,{type:"note",title:"Practical benefits",children:(0,r.jsx)(n.p,{children:"We use this technique in production systems to process terabyte-scale uploads in a high-performance, secure, and cost-optimized manner."})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"-conclusion",children:"\ud83d\udccc Conclusion"}),"\n",(0,r.jsxs)(n.p,{children:["Streaming uploads are ",(0,r.jsx)(n.strong,{children:"feasible and production-ready"})," in Spring Boot \u2013 and even more flexible thanks to MIME detection and optional on-the-fly compression.\nThe result: ",(0,r.jsx)(n.strong,{children:"lower infrastructure costs, better performance, and greater robustness"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["Complete, executable example: Streaming multipart with ",(0,r.jsx)(n.code,{children:"commons-fileupload2-core"}),", MIME detection via Apache Tika, optional on-the-fly compression (GZIP), and upload directly to Azure Blob Storage via SAS \u2013 ",(0,r.jsx)(n.strong,{children:"without"})," RAM/disk buffers."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"project-setup-gradle-kotlin-dsl",children:"Project-Setup (Gradle Kotlin DSL)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"build.gradle.kts"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'plugins {\n    id("org.springframework.boot") version "3.3.0"\n    id("io.spring.dependency-management") version "1.1.5"\n    kotlin("jvm") version "1.9.24"\n    kotlin("plugin.spring") version "1.9.24"\n}\n\ngroup = "com.example"\nversion = "0.0.1"\njava.sourceCompatibility = JavaVersion.VERSION_17\n\nrepositories { mavenCentral() }\n\ndependencies {\n    implementation("org.springframework.boot:spring-boot-starter-web")\n\n    // Azure Blob Storage SDK v12\n    implementation("com.azure:azure-storage-blob:12.26.0")\n\n    // Streaming Multipart Parsing\n    implementation("org.apache.commons:commons-fileupload2-core:2.0.0-M1")\n\n    // Apache Tika for MIME-Erkennung\n    implementation("org.apache.tika:tika-core:2.9.2")\n\n    // Jackson / Kotlin\n    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")\n    implementation(kotlin("reflect"))\n\n    testImplementation("org.springframework.boot:spring-boot-starter-test")\n}\n\ntasks.test { useJUnitPlatform() }\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," Update versions to the latest version if necessary."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/resources/application.yaml"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-yaml",children:"server:\n  tomcat:\n    max-swallow-size: -1 # prevents termination with large streams\n    max-http-form-post-size: -1\n\nazure:\n  storage:\n    # Fully qualified SAS URL of the container, e.g.:\n    # https://<account>.blob.core.windows.net/<container>?sv=...&sig=...\n    containerSasUrl: ${AZURE_CONTAINER_SAS_URL:}\n\nupload:\n  compression:\n    enabled: true # global switch, can be overridden per request\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"configuration-azure-blob-container-client",children:"Configuration: Azure Blob Container Client"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/AzureStorageConfig.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload\n\nimport com.azure.storage.blob.BlobContainerClient\nimport com.azure.storage.blob.BlobContainerClientBuilder\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nclass AzureStorageConfig {\n    @Bean\n    @ConfigurationProperties(prefix = "azure.storage")\n    fun azureStorageProps() = AzureStorageProps()\n\n    @Bean\n    fun blobContainerClient(props: AzureStorageProps): BlobContainerClient =\n        BlobContainerClientBuilder()\n            .endpoint(props.containerSasUrl)\n            .buildClient()\n}\n\nclass AzureStorageProps {\n    /** Full container SAS URL including token */\n    lateinit var containerSasUrl: String\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"utility-peekableinputstream--mime-detection-tika",children:"Utility: PeekableInputStream + MIME detection (Tika)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/io/PeekableInputStream.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"package com.example.upload.io\n\nimport java.io.BufferedInputStream\nimport java.io.InputStream\n\n/**\n * Wraps an InputStream, allows peek via mark/reset without reading the entire stream.\n */\nclass PeekableInputStream(source: InputStream, private val peekBufferSize: Int = 8192) : InputStream() {\n    private val inBuf = if (source.markSupported()) source else BufferedInputStream(source, peekBufferSize)\n\n    override fun read(): Int = inBuf.read()\n    override fun read(b: ByteArray, off: Int, len: Int): Int = inBuf.read(b, off, len)\n    override fun close() = inBuf.close()\n\n    fun <T> peek(peekLen: Int = peekBufferSize, block: (ByteArray) -> T): T {\n        inBuf.mark(peekLen)\n        val buf = ByteArray(peekLen)\n        val n = inBuf.read(buf)\n        inBuf.reset()\n        val slice = if (n <= 0) ByteArray(0) else buf.copyOf(n)\n        return block(slice)\n    }\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/mime/MimeDetector.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload.mime\n\nimport com.example.upload.io.PeekableInputStream\nimport org.apache.tika.Tika\n\nobject MimeDetector {\n    private val tika = Tika()\n\n    fun detect(peekable: PeekableInputStream, fallback: String = "application/octet-stream"): String =\n        peekable.peek { bytes ->\n            val detected = runCatching { tika.detect(bytes) }.getOrNull()\n            detected ?: fallback\n        }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"service-streaming-upload-with-optional-on-the-fly-gzip-compression",children:"Service: Streaming upload with optional on-the-fly GZIP compression"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/UploadService.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload\n\nimport com.azure.storage.blob.BlobContainerClient\nimport com.azure.storage.blob.specialized.BlockBlobClient\nimport com.example.upload.io.PeekableInputStream\nimport com.example.upload.mime.MimeDetector\nimport org.apache.commons.fileupload2.core.FileItemInputIterator\nimport org.apache.commons.fileupload2.core.FileUpload\nimport org.apache.commons.fileupload2.core.FileUploadException\nimport org.apache.commons.fileupload2.core.RequestContext\nimport org.springframework.stereotype.Service\nimport java.io.InputStream\nimport java.util.zip.GZIPOutputStream\n\n@Service\nclass UploadService(private val container: BlobContainerClient) {\n\n    data class UploadResult(val files: List<FileInfo>)\n    data class FileInfo(\n        val fieldName: String,\n        val filename: String,\n        val size: Long?,\n        val mimeType: String,\n        val compressed: Boolean,\n        val blobName: String\n    )\n\n    /**\n     * Stream multipart files directly to Azure. No intermediate buffers/temp files.\n     * @param request Spring/Servlet request adapter for FileUpload2\n     * @param forceCompression Optional override (header/param)\n     */\n    fun handleStreamingUpload(request: RequestContext, forceCompression: Boolean? = null): UploadResult {\n        try {\n            val iter: FileItemInputIterator = FileUpload().getItemIterator(request)\n            val uploaded = mutableListOf<FileInfo>()\n\n            while (iter.hasNext()) {\n                val item = iter.next()\n                if (item.isFormField) continue\n\n                val originalName = item.name ?: "upload.bin"\n                val field = item.fieldName ?: "file"\n                val size = item.headers?.getHeader("Content-Length")?.toLongOrNull()\n\n                // Make input stream peek-capable\n                val peekable = PeekableInputStream(item.inputStream)\n                val mime = MimeDetector.detect(peekable)\n\n                val shouldCompress = forceCompression\n                    ?: shouldCompressMime(mime)\n\n                val (blobName, compressed) = if (shouldCompress) {\n                    val nameGz = "$originalName.gz"\n                    uploadStream(peekable, nameGz, compress = true)\n                    nameGz to true\n                } else {\n                    uploadStream(peekable, originalName, compress = false)\n                    originalName to false\n                }\n\n                uploaded += FileInfo(\n                    fieldName = field,\n                    filename = originalName,\n                    size = size,\n                    mimeType = mime,\n                    compressed = compressed,\n                    blobName = blobName\n                )\n            }\n\n            return UploadResult(uploaded)\n        } catch (e: FileUploadException) {\n            throw RuntimeException("Multipart parsing failed", e)\n        }\n    }\n\n    private fun shouldCompressMime(mime: String): Boolean {\n        // Heuristics: textual = compress\n        if (mime.startsWith("text/")) return true\n        return mime in setOf(\n            "application/json",\n            "application/xml",\n            "application/x-ndjson",\n            "text/csv",\n            "application/csv"\n        )\n    }\n\n    private fun uploadStream(input: InputStream, blobName: String, compress: Boolean) {\n        val client: BlockBlobClient = container.getBlobClient(blobName).blockBlobClient\n\n        // For unknown length: write via OutputStream (no length required)\n        client.getBlobOutputStream(true).use { blobOut ->\n            if (compress) {\n                GZIPOutputStream(blobOut).use { gz ->\n                    input.copyTo(gz, DEFAULT_BUFFER)\n                    // GZIPOutputStream .close() writes Footer\n                }\n            } else {\n                input.copyTo(blobOut, DEFAULT_BUFFER)\n            }\n        }\n    }\n\n    companion object { const val DEFAULT_BUFFER = 1024 * 1024 }\n}\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:["We use ",(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"BlockBlobClient.getBlobOutputStream(overwrite = true)"})})," so that no content length is required. This keeps the upload completely streaming-based."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"controller-minimal-api-pass-through-servlet-request",children:"Controller: Minimal API (pass through servlet request)"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"src/main/kotlin/com/example/upload/UploadController.kt"})})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'package com.example.upload\n\nimport org.apache.commons.fileupload2.core.RequestContext\nimport org.springframework.http.MediaType\nimport org.springframework.web.bind.annotation.PostMapping\nimport org.springframework.web.bind.annotation.RequestHeader\nimport org.springframework.web.bind.annotation.RequestMapping\nimport org.springframework.web.bind.annotation.RestController\nimport jakarta.servlet.http.HttpServletRequest\n\n@RestController\n@RequestMapping("/api")\nclass UploadController(private val service: UploadService) {\n\n    @PostMapping("/upload", consumes = [MediaType.MULTIPART_FORM_DATA_VALUE])\n    fun upload(\n        request: HttpServletRequest,\n        @RequestHeader(name = "x-compress", required = false) compressHeader: String?\n    ): UploadService.UploadResult {\n        val forceCompression: Boolean? = compressHeader?.let { it.equals("true", ignoreCase = true) }\n\n        val ctx = object : RequestContext {\n            override fun getContentType(): String = request.contentType\n            override fun getContentLength(): Int = request.contentLength\n            override fun getCharacterEncoding(): String? = request.characterEncoding\n            override fun getInputStream() = request.inputStream\n        }\n\n        return service.handleStreamingUpload(ctx, forceCompression)\n    }\n}\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"error-handling--optional-rollback-example",children:"Error handling & (optional) rollback example"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Pattern:"})," Manage metadata and blobs separately. Write the blob first, then create the metadata \u2013 or vice versa, with a ",(0,r.jsx)(n.strong,{children:"compensating action"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:"try {\n    // 1) Blob/Upload\n    val result = service.handleStreamingUpload(ctx)\n\n    // 2) Send metadata to backend\n    metadataClient.createFor(result.files)\n\n    return result\n} catch (ex: Exception) {\n    // Rollback strategy: delete any metadata that may have been created\n    runCatching { metadataClient.rollback() }\n    throw ex\n}\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsxs)(n.h2,{id:"test-with-curl",children:["Test with ",(0,r.jsx)(n.code,{children:"curl"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:'curl -X POST "http://localhost:8080/api/upload" \\\n  -H "x-compress: true" \\\n  -F "file=@./sample.csv" \\\n  -H "Expect:" # verhindert 100-continue Verz\xf6gerung\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"security--operational-aspects-short-checklist",children:"Security & operational aspects (short checklist)"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"SAS tokens"}),": prefix-scoped (target path only), short lifetime, only necessary permissions (manage write/create/delete separately)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Backpressure"}),": no buffers, no temporary files; Tomcat limits (see ",(0,r.jsx)(n.code,{children:"application.yaml"}),")."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Limits"}),": Set server and proxy timeouts (AGIC/APIM) high enough."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Observability"}),": Log upload duration, bytes, client IP, MIME, compression flag (without PII). Traces for error paths."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Validation"}),": Whitelist of permitted MIME types, max file size on the server side (cancel early), virus scan as needed."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"How do I determine the blob content type/encoding?"}),"\nIf not compressed: set ",(0,r.jsx)(n.code,{children:"Content-Type"})," via blob HTTP header/metadata. For GZIP: set ",(0,r.jsx)(n.code,{children:"Content-Encoding: gzip"}),", optionally save original MIME as user metadata."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Example:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-kotlin",children:'val block = container.getBlobClient(blobName).blockBlobClient\nval headers = com.azure.storage.blob.models.BlobHttpHeaders()\n    .setContentType("application/json")\n    .setContentEncoding("gzip")\nblock.setHttpHeaders(headers)\n'})}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"setHttpHeaders"})," can be set after the upload (separate call) \u2013 or you can use ",(0,r.jsx)(n.code,{children:"beginUpload"}),"/",(0,r.jsx)(n.code,{children:"commitBlockList"})," with options."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"How do I prevent RAM spikes?"}),"\nKeep buffers small (1\u20134 MB), ",(0,r.jsx)(n.code,{children:"copyTo"})," buffer constant. No ",(0,r.jsx)(n.code,{children:"ByteArrayOutputStream"})," accumulation."]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Can I parallelize?"}),"\nFor pure streaming endpoints: rather no (no length). For large known files, ",(0,r.jsx)(n.code,{children:"ParallelTransferOptions"})," can be useful for ",(0,r.jsx)(n.code,{children:"upload(InputStream, length)"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h2,{id:"end-to-end-sequence-simplified-steps",children:"End-to-end sequence (simplified steps)"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Client sends multipart \u2192 Server parses stream via FileUpload2."}),"\n",(0,r.jsx)(n.li,{children:"MIME detection via Peek (Tika)."}),"\n",(0,r.jsx)(n.li,{children:"Optional GZIP \u2192 Stream is compressed on-the-fly."}),"\n",(0,r.jsx)(n.li,{children:"BlobOutputStream writes directly to Azure."}),"\n",(0,r.jsx)(n.li,{children:"Optional: Set HTTP header/metadata, call metadata service."}),"\n",(0,r.jsx)(n.li,{children:"Error \u2192 Trigger compensation (rollback)."}),"\n"]}),"\n",(0,r.jsx)(n.hr,{})]})}function u(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},7065:e=>{e.exports=JSON.parse('{"permalink":"/en/blog/springboot-fileupload-azure","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-01-20-springboot-fileupload-azure.md","title":"Streaming File Uploads to Azure Blob Storage with Spring Boot","description":"Memory-efficient processing of large uploads directly in Azure Storage\u2014without temporary storage in RAM.","date":"2025-01-20T00:00:00.000Z","tags":[{"inline":false,"label":"Spring Boot","permalink":"/en/blog/tags/spring-boot","description":"Spring Boot"},{"inline":false,"label":"Kotlin","permalink":"/en/blog/tags/kotlin","description":"Kotlin"},{"inline":false,"label":"Java","permalink":"/en/blog/tags/java","description":"Java"},{"inline":false,"label":"Azure","permalink":"/en/blog/tags/azure","description":"Azure"},{"inline":false,"label":"Blob Storage","permalink":"/en/blog/tags/blob-storage","description":"Blob Storage"},{"inline":false,"label":"Fileupload","permalink":"/en/blog/tags/fileupload","description":"Fileupload"}],"readingTime":8.11,"hasTruncateMarker":true,"authors":[{"name":"Brigitte B\xf6hm","title":"Cloud & Data Platform Engineer","url":"https://www.linkedin.com/in/brigitte-boehm-34b7a025","page":{"permalink":"/en/blog/authors/brigitte"},"socials":{"github":"https://github.com/bri-b-dev","linkedin":"https://www.linkedin.com/in/brigitte-boehm-34b7a025"},"imageURL":"https://github.com/bri-b-dev.png","key":"brigitte"}],"frontMatter":{"slug":"springboot-fileupload-azure","title":"Streaming File Uploads to Azure Blob Storage with Spring Boot","authors":"brigitte","tags":["spring-boot","kotlin","java","azure","blob-storage","fileupload"],"date":"2025-01-20T00:00:00.000Z","description":"Memory-efficient processing of large uploads directly in Azure Storage\u2014without temporary storage in RAM."},"unlisted":false,"prevItem":{"title":"AKS Node Selection: Physical Pools vs. Virtual Nodes","permalink":"/en/blog/aks-node-selection"},"nextItem":{"title":"Workload Identity in AKS \u2013 Lessons Learned","permalink":"/en/blog/workload-identity-lessons-learned"}}')},7293:(e,n,t)=>{t.d(n,{A:()=>N});var i=t(6540),r=t(4848);function o(e){const{mdxAdmonitionTitle:n,rest:t}=function(e){const n=i.Children.toArray(e),t=n.find(e=>i.isValidElement(e)&&"mdxAdmonitionTitle"===e.type),o=n.filter(e=>e!==t),a=t?.props.children;return{mdxAdmonitionTitle:a,rest:o.length>0?(0,r.jsx)(r.Fragment,{children:o}):null}}(e.children),o=e.title??n;return{...e,...o&&{title:o},children:t}}var a=t(4164),l=t(1312),s=t(7559);const c="admonition_xJq3",d="admonitionHeading_Gvgb",p="admonitionIcon_Rf37",u="admonitionContent_BuS1";function m({type:e,className:n,children:t}){return(0,r.jsx)("div",{className:(0,a.A)(s.G.common.admonition,s.G.common.admonitionType(e),c,n),children:t})}function h({icon:e,title:n}){return(0,r.jsxs)("div",{className:d,children:[(0,r.jsx)("span",{className:p,children:e}),n]})}function g({children:e}){return e?(0,r.jsx)("div",{className:u,children:e}):null}function x(e){const{type:n,icon:t,title:i,children:o,className:a}=e;return(0,r.jsxs)(m,{type:n,className:a,children:[i||t?(0,r.jsx)(h,{title:i,icon:t}):null,(0,r.jsx)(g,{children:o})]})}function f(e){return(0,r.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const b={icon:(0,r.jsx)(f,{}),title:(0,r.jsx)(l.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function j(e){return(0,r.jsx)(x,{...b,...e,className:(0,a.A)("alert alert--secondary",e.className),children:e.children})}function v(e){return(0,r.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const k={icon:(0,r.jsx)(v,{}),title:(0,r.jsx)(l.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function S(e){return(0,r.jsx)(x,{...k,...e,className:(0,a.A)("alert alert--success",e.className),children:e.children})}function y(e){return(0,r.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const C={icon:(0,r.jsx)(y,{}),title:(0,r.jsx)(l.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function w(e){return(0,r.jsx)(x,{...C,...e,className:(0,a.A)("alert alert--info",e.className),children:e.children})}function B(e){return(0,r.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const I={icon:(0,r.jsx)(B,{}),title:(0,r.jsx)(l.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function A(e){return(0,r.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,r.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const z={icon:(0,r.jsx)(A,{}),title:(0,r.jsx)(l.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const M={icon:(0,r.jsx)(B,{}),title:(0,r.jsx)(l.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const T={...{note:j,tip:S,info:w,warning:function(e){return(0,r.jsx)(x,{...I,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,r.jsx)(x,{...z,...e,className:(0,a.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,r.jsx)(j,{title:"secondary",...e}),important:e=>(0,r.jsx)(w,{title:"important",...e}),success:e=>(0,r.jsx)(S,{title:"success",...e}),caution:function(e){return(0,r.jsx)(x,{...M,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})}}};function N(e){const n=o(e),t=(i=n.type,T[i]||(console.warn(`No admonition component found for admonition type "${i}". Using Info as fallback.`),T.info));var i;return(0,r.jsx)(t,{...n})}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var i=t(6540);const r={},o=i.createContext(r);function a(e){const n=i.useContext(o);return i.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);