"use strict";(self.webpackChunkbri_b_dev_github_io=self.webpackChunkbri_b_dev_github_io||[]).push([[4184],{2433:e=>{e.exports=JSON.parse('{"permalink":"/en/blog/terraform-patterns-aks-azure","source":"@site/i18n/en/docusaurus-plugin-content-blog/2025-02-03-terraform-patterns.md","title":"Terraform Patterns for AKS & Azure","description":"Experiences with modular Terraform setups for AKS \u2013 from module design and RBAC to network policies and CI/CD.","date":"2025-02-03T00:00:00.000Z","tags":[{"inline":false,"label":"Terraform","permalink":"/en/blog/tags/terraform","description":"Terraform"},{"inline":false,"label":"AKS","permalink":"/en/blog/tags/aks","description":"Azure Kubernetes Service"},{"inline":false,"label":"Azure","permalink":"/en/blog/tags/azure","description":"Azure"},{"inline":false,"label":"RBAC","permalink":"/en/blog/tags/rbac","description":"Role-Based Access Control"},{"inline":false,"label":"Network Policy","permalink":"/en/blog/tags/network-policy","description":"Network Policy"},{"inline":false,"label":"Modules","permalink":"/en/blog/tags/modules","description":"Modules"},{"inline":false,"label":"CI/CD","permalink":"/en/blog/tags/cicd","description":"Continuous Integration and Continuous Deployment"}],"readingTime":13.48,"hasTruncateMarker":true,"authors":[{"name":"Brigitte B\xf6hm","title":"Cloud & Data Platform Engineer","url":"https://www.linkedin.com/in/brigitte-boehm-34b7a025","page":{"permalink":"/en/blog/authors/brigitte"},"socials":{"github":"https://github.com/bri-b-dev","linkedin":"https://www.linkedin.com/in/brigitte-boehm-34b7a025"},"imageURL":"https://github.com/bri-b-dev.png","key":"brigitte"}],"frontMatter":{"slug":"terraform-patterns-aks-azure","title":"Terraform Patterns for AKS & Azure","authors":"brigitte","tags":["terraform","aks","azure","rbac","network-policy","modules","cicd"],"date":"2025-02-03T00:00:00.000Z","description":"Experiences with modular Terraform setups for AKS \u2013 from module design and RBAC to network policies and CI/CD."},"unlisted":false,"prevItem":{"title":"API-First wotj Spring Boot & Kotlin","permalink":"/en/blog/api-first-springboot-kotlin"},"nextItem":{"title":"AKS Node Selection: Physical Pools vs. Virtual Nodes","permalink":"/en/blog/aks-node-selection"}}')},5067:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var s=r(2433),i=r(4848),t=r(8453),a=r(7293);const o={slug:"terraform-patterns-aks-azure",title:"Terraform Patterns for AKS & Azure",authors:"brigitte",tags:["terraform","aks","azure","rbac","network-policy","modules","cicd"],date:new Date("2025-02-03T00:00:00.000Z"),description:"Experiences with modular Terraform setups for AKS \u2013 from module design and RBAC to network policies and CI/CD."},l=void 0,c={authorsImageUrls:[void 0]},d=[{value:"\ud83e\uddf1 Module architecture: Separate by responsibilities",id:"-module-architecture-separate-by-responsibilities",level:2},{value:"\ud83d\udd27 Example: AKS module (interface)",id:"-example-aks-module-interface",level:2},{value:"\ud83e\udeaa RBAC &amp; Identities: Common Pitfalls",id:"-rbac--identities-common-pitfalls",level:2},{value:"1) Azure RBAC vs. Kubernetes RBAC",id:"1-azure-rbac-vs-kubernetes-rbac",level:3},{value:"2) Kubelet/ACR permissions",id:"2-kubeletacr-permissions",level:3},{value:"3) Network roles",id:"3-network-roles",level:3},{value:"\ud83d\udd10 Network Policies: Practice Instead of Theory",id:"-network-policies-practice-instead-of-theory",level:2},{value:"Baseline (namespace side) \u2013 Default Deny",id:"baseline-namespace-side--default-deny",level:3},{value:"Allow: Ingress from the ingress controller + DNS egress",id:"allow-ingress-from-the-ingress-controller--dns-egress",level:3},{value:"\ud83c\udf10 Network setup: proven options",id:"-network-setup-proven-options",level:2},{value:"\ud83e\uddea Environments, Workspaces &amp; State",id:"-environments-workspaces--state",level:2},{value:"\ud83d\udea6 CI/CD &amp; Security",id:"-cicd--security",level:2},{value:"\ud83d\udce6 Complete AKS example (abridged)",id:"-complete-aks-example-abridged",level:2},{value:"\ud83e\udded Checklist \u2013 Things that can go wrong",id:"-checklist--things-that-can-go-wrong",level:2},{value:"\ud83d\udccc Conclusion",id:"-conclusion",level:2},{value:"\ud83d\udce6 Complete AKS module (example)",id:"-complete-aks-module-example",level:2},{value:"\ud83d\ude80 Azure DevOps Pipeline for Terraform AKS",id:"-azure-devops-pipeline-for-terraform-aks",level:2},{value:"\ud83d\udccc Conclusion",id:"-conclusion-1",level:2},{value:"\ud83e\udde9 Production-ready AKS module (Terraform)",id:"-production-ready-aks-module-terraform",level:2},{value:"Notes &amp; Best Practices",id:"notes--best-practices",level:3},{value:"\ud83d\udd17 Example: Using the AKS module in <code>infra/env/dev/main.tf</code>",id:"-example-using-the-aks-module-in-infraenvdevmaintf",level:2}];function u(e){const n={blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["AKS projects grow quickly: ",(0,i.jsx)(n.strong,{children:"clusters, node pools, identities, networks, ACR, policies"})," \u2013 and parameters vary per environment (dev/test/prod). Without structure, the code base becomes fragile. In this post, I'll show ",(0,i.jsx)(n.strong,{children:"proven Terraform patterns"})," for Azure & AKS from projects, including ",(0,i.jsx)(n.strong,{children:"RBAC"})," and ",(0,i.jsx)(n.strong,{children:"network policy"})," pitfalls."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-module-architecture-separate-by-responsibilities",children:"\ud83e\uddf1 Module architecture: Separate by responsibilities"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal:"}),' Reusable, clearly defined modules instead of a "monolith."']}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"infra/\n\u251c\u2500 modules/\n\u2502  \u251c\u2500 network/                 # VNet, Subnets, NSGs, UDR/NAT\n\u2502  \u251c\u2500 aks/                     # AKS Cluster + Pools\n\u2502  \u251c\u2500 identity/                # UAMI/MI + Role Assignments\n\u2502  \u251c\u2500 acr/                     # Container Registry\n\u2502  \u251c\u2500 monitoring/              # Log Analytics, Insights\n\u2502  \u251c\u2500 policies/                # Azure Policy + AKS Add-Ons\n\u2502  \u2514\u2500 dns/                     # Private DNS Zones\n\u251c\u2500 env/\n\u2502  \u251c\u2500 dev/\n\u2502  \u2502  \u251c\u2500 main.tf               # Assembling the modules\n\u2502  \u2502  \u251c\u2500 variables.tfvars\n\u2502  \u2502  \u2514\u2500 backend.tf            # Remote State\n\u2502  \u2514\u2500 prod/\n\u2502     \u251c\u2500 ...\n\u2514\u2500 global/\n   \u2514\u2500 rg.tf                    # Resource groups, tags, management\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pattern:"})," Environments are ",(0,i.jsx)(n.strong,{children:"compositions"})," of modules. Each module has a ",(0,i.jsx)(n.strong,{children:"clear API"})," (inputs/outputs) and minimal side effects."]}),"\n",(0,i.jsx)(a.A,{type:"tip",title:"Keep Inputs simple",children:(0,i.jsxs)(n.p,{children:["Avoid huge, nested ",(0,i.jsx)(n.code,{children:"object"})," variables. It is better to use several flat inputs with defaults \u2013 this reduces ",(0,i.jsx)(n.code,{children:"Unknown"})," diffs and makes upgrades easier."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-example-aks-module-interface",children:"\ud83d\udd27 Example: AKS module (interface)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'variable "name" { type = string }\nvariable "location" { type = string }\nvariable "resource_group_name" { type = string }\nvariable "kubernetes_version" { type = string }\nvariable "network_profile" {\n  type = object({\n    plugin           = string   # azure, kubenet, cni_overlay\n    pod_cidr         = optional(string)\n    service_cidr     = string\n    dns_service_ip   = string\n    outbound_type    = string   # loadBalancer, userDefinedRouting, managedNATGateway\n  })\n}\nvariable "enable_azure_rbac" { type = bool, default = true }\nvariable "aad_admin_group_object_ids" { type = list(string), default = [] }\nvariable "system_node_pool" {\n  type = object({\n    name       = string\n    vm_size    = string\n    min_count  = number\n    max_count  = number\n    os_sku     = optional(string, "Ubuntu")\n  })\n}\nvariable "user_node_pools" {\n  type = list(object({\n    name       = string\n    vm_size    = string\n    min_count  = number\n    max_count  = number\n    taints     = optional(list(string), [])\n    labels     = optional(map(string), {})\n    mode       = optional(string, "User")\n  }))\n  default = []\n}\noutput "kubelet_identity_principal_id" { value = azurerm_kubernetes_cluster.this.kubelet_identity[0].object_id }\noutput "cluster_id" { value = azurerm_kubernetes_cluster.this.id }\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note:"})," Block names/flags differ depending on provider versions. Capsule version specifics ",(0,i.jsx)(n.strong,{children:"in the module"})," and provide stable inputs to the outside world."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-rbac--identities-common-pitfalls",children:"\ud83e\udeaa RBAC & Identities: Common Pitfalls"}),"\n",(0,i.jsx)(n.h3,{id:"1-azure-rbac-vs-kubernetes-rbac",children:"1) Azure RBAC vs. Kubernetes RBAC"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Azure RBAC for Kubernetes"}),' ("AKS-managed AAD") simplifies AuthN/AuthZ, but ',(0,i.jsx)(n.strong,{children:"mapping & propagation"})," may take seconds/minutes."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern:"})," Create ",(0,i.jsx)(n.strong,{children:"AAD groups"})," for cluster roles (e.g. ",(0,i.jsx)(n.code,{children:"aks-admins"}),", ",(0,i.jsx)(n.code,{children:"aks-devs"}),") and pass their object IDs as module input."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'# Pseudocode \u2013 module uses these IDs\nvariable "aad_admin_group_object_ids" { type = list(string) }\n# In the cluster block: activate AAD/RBAC and register groups as admins\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Anti-pattern:"})," Storing individual users directly \u2192 difficult to maintain, no rotation."]}),"\n",(0,i.jsx)(n.h3,{id:"2-kubeletacr-permissions",children:"2) Kubelet/ACR permissions"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["To enable nodes to pull images: ",(0,i.jsx)(n.code,{children:"AcrPull"})," on ",(0,i.jsx)(n.strong,{children:"ACR"})," for the ",(0,i.jsx)(n.strong,{children:"Kubelet identity"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Additionally: Build/Push pipeline \u2192 ",(0,i.jsx)(n.code,{children:"AcrPush"})," for CI service principal or UAMI."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'resource "azurerm_role_assignment" "kubelet_acr_pull" {\n  scope                = azurerm_container_registry.acr.id\n  role_definition_name = "AcrPull"\n  principal_id         = module.aks.kubelet_identity_principal_id\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"3-network-roles",children:"3) Network roles"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["For ",(0,i.jsx)(n.strong,{children:"UDR/NAT Gateway"}),": ",(0,i.jsx)(n.code,{children:"Network Contributor"})," on subnet/route table for ",(0,i.jsx)(n.strong,{children:"AKS-MI"})," (cluster identity) \u2013 otherwise provisioning/scale will fail."]}),"\n"]}),"\n",(0,i.jsx)(a.A,{type:"caution",title:"Eventual Consistency",children:(0,i.jsxs)(n.p,{children:["Role assignments are ",(0,i.jsx)(n.strong,{children:"eventually consistent"}),". Plan for wait times/",(0,i.jsx)(n.code,{children:"depends_on"})," or use a retry wrapper module."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-network-policies-practice-instead-of-theory",children:"\ud83d\udd10 Network Policies: Practice Instead of Theory"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Goal:"})," Default deny at pod level + targeted allow rules."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"CNI/policy matrix"})," differs depending on AKS version: Azure CNI (Classic/Overlay) & Kubenet behave differently."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pattern:"})," Parameterize policy engine (",(0,i.jsx)(n.code,{children:"azure"}),", ",(0,i.jsx)(n.code,{children:"calico"}),") as module input and generate ",(0,i.jsx)(n.strong,{children:"basic rules"})," centrally."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"baseline-namespace-side--default-deny",children:"Baseline (namespace side) \u2013 Default Deny"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: default-deny\n  namespace: myns\nspec:\n  podSelector: {}\n  policyTypes: [Ingress, Egress]\n"})}),"\n",(0,i.jsx)(n.h3,{id:"allow-ingress-from-the-ingress-controller--dns-egress",children:"Allow: Ingress from the ingress controller + DNS egress"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"apiVersion: networking.k8s.io/v1\nkind: NetworkPolicy\nmetadata:\n  name: allow-ingress-from-gateway\n  namespace: myns\nspec:\n  podSelector:\n    matchLabels:\n      app: web\n  ingress:\n    - from:\n        - namespaceSelector:\n            matchLabels:\n              kubernetes.io/metadata.name: ingress-nginx\n  egress:\n    - to:\n        - namespaceSelector:\n            matchLabels:\n              kubernetes.io/metadata.name: kube-system\n      ports:\n        - protocol: UDP\n          port: 53\n"})}),"\n",(0,i.jsx)(a.A,{type:"note",title:"Test",children:(0,i.jsxs)(n.p,{children:["Validate policies with ",(0,i.jsx)(n.code,{children:"netshoot"}),", ",(0,i.jsx)(n.code,{children:"curl"}),", ",(0,i.jsx)(n.code,{children:"dig"}),", and CI checks (e.g., Kyverno/OPA constraints). Automated smoke tests are invaluable."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-network-setup-proven-options",children:"\ud83c\udf10 Network setup: proven options"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Outbound"}),": ",(0,i.jsx)(n.code,{children:"managedNATGateway"})," or ",(0,i.jsx)(n.code,{children:"userDefinedRouting"})," with Azure Firewall."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Private clusters"}),": Private endpoint + DNS zones, jump host/bastion for ",(0,i.jsx)(n.code,{children:"kubectl"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Ingress"}),": AGIC or NGINX; for private clusters \u2192 internal load balancer/private link."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Egress lockdown"}),": Azure Firewall DNAT/application rules; policies for prohibited public IPs."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pattern:"})," Network module delivers ",(0,i.jsx)(n.strong,{children:"subnet IDs"}),"/routes as outputs to the AKS module; no circular dependencies."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-environments-workspaces--state",children:"\ud83e\uddea Environments, Workspaces & State"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Remote State"})," in Azure Storage (Blob) with ",(0,i.jsx)(n.strong,{children:"state locking"})," via storage lease."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"One workspace per environment"})," (e.g., ",(0,i.jsx)(n.code,{children:"dev"}),", ",(0,i.jsx)(n.code,{children:"prod"}),") \u2013 no mixing."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"tfvars"})," per environment + ",(0,i.jsx)(n.code,{children:"locals"})," for derived values (tags, naming conventions, CIDRs)."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'# backend.tf (je Env)\nterraform {\n  backend "azurerm" {}\n  required_version = ">= 1.7.0"\n  required_providers {\n    azurerm = {\n      source  = "hashicorp/azurerm"\n      version = "~> 3.100"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(a.A,{type:"tip",title:"Naming conventions",children:(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.code,{children:"locals.naming"})," block standardizes resource names across all modules (prefix/env/location)."]})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-cicd--security",children:"\ud83d\udea6 CI/CD & Security"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pipeline matrix"})," per environment (Plan/Apply) with manual approval for prod."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Pre-commit"}),": ",(0,i.jsx)(n.code,{children:"terraform fmt"}),", ",(0,i.jsx)(n.code,{children:"tflint"}),", ",(0,i.jsx)(n.code,{children:"tfsec"}),"/",(0,i.jsx)(n.code,{children:"checkov"}),", ",(0,i.jsx)(n.code,{children:"terrascan"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Drift Detection"}),": ",(0,i.jsx)(n.code,{children:"terraform plan"})," on schedule \u2192 Slack/Teams\u2011Report."]}),"\n",(0,i.jsxs)(n.li,{children:["Sign/archive ",(0,i.jsx)(n.strong,{children:"Plan\u2011Artifacts"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Provider\u2011Pins"})," + Renovate/Bump PRs \u2192 reproducible builds."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Pattern:"})," ",(0,i.jsx)(n.code,{children:"make plan ENV=dev"})," calls ",(0,i.jsx)(n.code,{children:"terraform workspace select dev"})," + ",(0,i.jsx)(n.code,{children:"-var-file=env/dev/variables.tfvars"})," \u2013 identical commands locally and in CI."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-complete-aks-example-abridged",children:"\ud83d\udce6 Complete AKS example (abridged)"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'module "network" {\n  source              = "../modules/network"\n  name                = local.naming.net\n  location            = var.location\n  address_space       = ["10.40.0.0/16"]\n  subnets = {\n    aks_nodes = {\n      prefix = "10.40.1.0/24"\n      nsg_rules = ["deny_internet_in", "allow_vnet"]\n    }\n  }\n}\n\nmodule "acr" {\n  source              = "../modules/acr"\n  name                = local.naming.acr\n  location            = var.location\n  sku                 = "Standard"\n}\n\nmodule "aks" {\n  source                  = "../modules/aks"\n  name                    = local.naming.aks\n  location                = var.location\n  resource_group_name     = azurerm_resource_group.rg.name\n  kubernetes_version      = var.k8s_version\n  network_profile = {\n    plugin         = "azure"\n    service_cidr   = "10.41.0.0/16"\n    dns_service_ip = "10.41.0.10"\n    outbound_type  = "managedNATGateway"\n  }\n  system_node_pool = {\n    name      = "sys"\n    vm_size   = "Standard_D4s_v5"\n    min_count = 1\n    max_count = 3\n  }\n  user_node_pools = [\n    {\n      name = "user"\n      vm_size = "Standard_D8s_v5"\n      min_count = 2\n      max_count = 10\n      labels = { "kubernetes.azure.com/mode" = "user" }\n    }\n  ]\n  enable_azure_rbac            = true\n  aad_admin_group_object_ids   = var.aad_admin_groups\n}\n\n# Role Assignment for Kubelet \u2192 ACR Pull\nresource "azurerm_role_assignment" "kubelet_acr" {\n  scope                = module.acr.id\n  role_definition_name = "AcrPull"\n  principal_id         = module.aks.kubelet_identity_principal_id\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-checklist--things-that-can-go-wrong",children:"\ud83e\udded Checklist \u2013 Things that can go wrong"}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Forgot ",(0,i.jsx)(n.code,{children:"AcrPull"})," for ",(0,i.jsx)(n.strong,{children:"Kubelet"})," \u2192 ImagePullBackOff"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Subnet/RT/NAT permissions missing \u2192 AKS provisioning hangs"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Azure RBAC groups not propagated \u2192 Admins cannot join (wait/retry)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Network policies not taking effect (policy engine/CNI does not match cluster config)"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Private DNS not configured \u2192 Control plane/ingress/ACR not reachable"]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",disabled:!0})," ","Provider upgrade without module encapsulation \u2192 Breaking changes everywhere"]}),"\n"]}),"\n",(0,i.jsx)(a.A,{type:"caution",title:"Production Readiness",children:(0,i.jsx)(n.p,{children:"Before prod rollout: e2e tests (deployments, pull from ACR, ingress, DNS, policy smoke), load tests, failover (node drain, pool scaling), backup/restore (etcd/Velero), secrets path (Key Vault + CSI)."})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-conclusion",children:"\ud83d\udccc Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["A ",(0,i.jsx)(n.strong,{children:"modular Terraform design"})," for AKS pays off: clearer responsibilities, less drift, reproducible builds, and controlled security. With clean RBAC, a well-thought-out network layout, and automated checks, the platform remains ",(0,i.jsx)(n.strong,{children:"scalable"})," and ",(0,i.jsx)(n.strong,{children:"operationally stable"}),"."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-complete-aks-module-example",children:"\ud83d\udce6 Complete AKS module (example)"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"modules/aks/main.tf"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'resource "azurerm_kubernetes_cluster" "this" {\n  name                = var.name\n  location            = var.location\n  resource_group_name = var.resource_group_name\n  dns_prefix          = "${var.name}-dns"\n  kubernetes_version  = var.kubernetes_version\n\n  identity {\n    type = "SystemAssigned"\n  }\n\n  default_node_pool {\n    name                = var.system_node_pool.name\n    vm_size             = var.system_node_pool.vm_size\n    min_count           = var.system_node_pool.min_count\n    max_count           = var.system_node_pool.max_count\n    enable_auto_scaling = true\n    os_sku              = var.system_node_pool.os_sku\n    mode                = "System"\n  }\n\n  dynamic "agent_pool_profile" {\n    for_each = var.user_node_pools\n    content {\n      name                = agent_pool_profile.value.name\n      vm_size             = agent_pool_profile.value.vm_size\n      min_count           = agent_pool_profile.value.min_count\n      max_count           = agent_pool_profile.value.max_count\n      enable_auto_scaling = true\n      mode                = lookup(agent_pool_profile.value, "mode", "User")\n      node_labels         = lookup(agent_pool_profile.value, "labels", null)\n      node_taints         = lookup(agent_pool_profile.value, "taints", null)\n    }\n  }\n\n  role_based_access_control_enabled = var.enable_azure_rbac\n\n  azure_active_directory_role_based_access_control {\n    managed                = true\n    admin_group_object_ids = var.aad_admin_group_object_ids\n  }\n\n  network_profile {\n    network_plugin     = var.network_profile.plugin\n    service_cidr       = var.network_profile.service_cidr\n    dns_service_ip     = var.network_profile.dns_service_ip\n    pod_cidr           = try(var.network_profile.pod_cidr, null)\n    outbound_type      = var.network_profile.outbound_type\n  }\n}\n\noutput "kubelet_identity_principal_id" {\n  value = azurerm_kubernetes_cluster.this.kubelet_identity[0].object_id\n}\n\noutput "id" {\n  value = azurerm_kubernetes_cluster.this.id\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"modules/aks/variables.tf"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'variable "name" { type = string }\nvariable "location" { type = string }\nvariable "resource_group_name" { type = string }\nvariable "kubernetes_version" { type = string }\n\nvariable "network_profile" {\n  type = object({\n    plugin         = string\n    service_cidr   = string\n    dns_service_ip = string\n    pod_cidr       = optional(string)\n    outbound_type  = string\n  })\n}\n\nvariable "enable_azure_rbac" { type = bool }\nvariable "aad_admin_group_object_ids" { type = list(string) }\n\nvariable "system_node_pool" {\n  type = object({\n    name      = string\n    vm_size   = string\n    min_count = number\n    max_count = number\n    os_sku    = optional(string, "Ubuntu")\n  })\n}\n\nvariable "user_node_pools" {\n  type = list(object({\n    name      = string\n    vm_size   = string\n    min_count = number\n    max_count = number\n    mode      = optional(string, "User")\n    labels    = optional(map(string))\n    taints    = optional(list(string))\n  }))\n  default = []\n}\n'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-azure-devops-pipeline-for-terraform-aks",children:"\ud83d\ude80 Azure DevOps Pipeline for Terraform AKS"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:".azure-pipelines/terraform-aks.yml"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-yaml",children:"trigger:\n  branches:\n    include:\n      - main\n\nvariables:\n  TF_VERSION: '1.7.5'\n  AZURE_SUBSCRIPTION: 'MyServiceConnection'\n  ENVIRONMENT: 'dev'\n\nstages:\n  - stage: validate\n    displayName: \"Terraform Validate & Lint\"\n    jobs:\n      - job: lint\n        pool:\n          vmImage: 'ubuntu-latest'\n        steps:\n          - task: UseTerraform@0\n            inputs:\n              terraformVersion: $(TF_VERSION)\n          - script: |\n              terraform fmt -check -recursive\n              terraform init -backend=false\n              terraform validate\n            displayName: \"Terraform fmt & validate\"\n          - script: |\n              curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash\n              tflint --recursive\n            displayName: \"Run TFLint\"\n\n  - stage: plan\n    displayName: \"Terraform Plan\"\n    dependsOn: validate\n    jobs:\n      - job: plan\n        pool:\n          vmImage: 'ubuntu-latest'\n        steps:\n          - task: UseTerraform@0\n            inputs:\n              terraformVersion: $(TF_VERSION)\n          - task: TerraformCLI@0\n            displayName: \"Terraform Init\"\n            inputs:\n              command: 'init'\n              backendType: 'azurerm'\n              backendServiceArm: $(AZURE_SUBSCRIPTION)\n              ensureBackend: true\n              workingDirectory: 'infra/env/$(ENVIRONMENT)'\n          - task: TerraformCLI@0\n            displayName: \"Terraform Plan\"\n            inputs:\n              command: 'plan'\n              environmentServiceName: $(AZURE_SUBSCRIPTION)\n              workingDirectory: 'infra/env/$(ENVIRONMENT)'\n              vars: |\n                environment=$(ENVIRONMENT)\n          - publish: $(System.DefaultWorkingDirectory)/infra/env/$(ENVIRONMENT)/tfplan\n            artifact: tfplan\n\n  - stage: apply\n    displayName: \"Terraform Apply\"\n    dependsOn: plan\n    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))\n    jobs:\n      - deployment: apply\n        environment: aks-$(ENVIRONMENT)\n        pool:\n          vmImage: 'ubuntu-latest'\n        strategy:\n          runOnce:\n            deploy:\n              steps:\n                - task: UseTerraform@0\n                  inputs:\n                    terraformVersion: $(TF_VERSION)\n                - download: current\n                  artifact: tfplan\n                - task: TerraformCLI@0\n                  displayName: \"Terraform Apply\"\n                  inputs:\n                    command: 'apply'\n                    environmentServiceName: $(AZURE_SUBSCRIPTION)\n                    workingDirectory: 'infra/env/$(ENVIRONMENT)'\n                    commandOptions: \"tfplan\"\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-conclusion-1",children:"\ud83d\udccc Conclusion"}),"\n",(0,i.jsxs)(n.p,{children:["With a ",(0,i.jsx)(n.strong,{children:"clearly encapsulated AKS module"})," and a ",(0,i.jsx)(n.strong,{children:"CI/CD pipeline in Azure DevOps"}),", you get:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Reproducible cluster deployments"}),"\n",(0,i.jsx)(n.li,{children:"Automated validation (fmt, validate, lint)"}),"\n",(0,i.jsx)(n.li,{children:"Plan review with artifacts"}),"\n",(0,i.jsx)(n.li,{children:"Manual or automated apply with service connection"}),"\n",(0,i.jsx)(n.li,{children:"Easy extensibility (drift detection, security scans)"}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"-production-ready-aks-module-terraform",children:"\ud83e\udde9 Production-ready AKS module (Terraform)"}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:"Structure (as an example):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-text",children:"modules/aks/\n\u251c\u2500 main.tf\n\u251c\u2500 variables.tf\n\u251c\u2500 outputs.tf\n\u2514\u2500 README.md\n"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"modules/aks/variables.tf"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'variable "name" { type = string }\nvariable "location" { type = string }\nvariable "resource_group_name" { type = string }\n\nvariable "kubernetes_version" { type = string }\n\nvariable "tags" { type = map(string), default = {} }\n\nvariable "identity_type" {\n  description = "system | user"\n  type        = string\n  default     = "system"\n  validation {\n    condition     = contains(["system", "user"], var.identity_type)\n    error_message = "identity_type must be \'system\' or \'user\'"\n  }\n}\n\nvariable "user_assigned_identity_ids" {\n  description = "Only used when identity_type=user"\n  type        = list(string)\n  default     = []\n}\n\nvariable "network_profile" {\n  type = object({\n    plugin           = string                    # azure | kubenet | cni_overlay\n    service_cidr     = string\n    dns_service_ip   = string\n    pod_cidr         = optional(string)\n    outbound_type    = optional(string, "managedNATGateway") # loadBalancer | userDefinedRouting | managedNATGateway\n    network_policy   = optional(string, null)   # azure | calico | null\n  })\n}\n\nvariable "private_cluster_enabled" { type = bool, default = false }\nvariable "api_server_authorized_ip_ranges" { type = list(string), default = [] }\n\nvariable "aad_admin_group_object_ids" { type = list(string), default = [] }\nvariable "enable_azure_rbac" { type = bool, default = true }\n\nvariable "oms_workspace_resource_id" { type = string, default = null }\nvariable "enable_azure_policy_addon" { type = bool, default = false }\n\nvariable "system_node_pool" {\n  type = object({\n    name               = string\n    vm_size            = string\n    min_count          = number\n    max_count          = number\n    os_disk_size_gb    = optional(number, 128)\n    os_sku             = optional(string, "Ubuntu")\n    node_labels        = optional(map(string), {})\n    node_taints        = optional(list(string), [])\n    zones              = optional(list(string), null)\n  })\n}\n\nvariable "user_node_pools" {\n  description = "List of additional user pools"\n  type = list(object({\n    name               = string\n    vm_size            = string\n    min_count          = number\n    max_count          = number\n    os_disk_size_gb    = optional(number, 128)\n    os_sku             = optional(string, "Ubuntu")\n    node_labels        = optional(map(string), {})\n    node_taints        = optional(list(string), [])\n    mode               = optional(string, "User")\n    zones              = optional(list(string), null)\n  }))\n  default = []\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"modules/aks/main.tf"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'# Note: Provider configuration (azurerm) is set outside the module.\n\nlocals {\n  identity_block = var.identity_type == "user" ? {\n    type         = "UserAssigned"\n    identity_ids = var.user_assigned_identity_ids\n  } : {\n    type = "SystemAssigned"\n  }\n}\n\nresource "azurerm_kubernetes_cluster" "this" {\n  name                = var.name\n  location            = var.location\n  resource_group_name = var.resource_group_name\n  kubernetes_version  = var.kubernetes_version\n  dns_prefix          = replace(var.name, ".", "-")\n\n  identity {\n    type         = local.identity_block.type\n    identity_ids = try(local.identity_block.identity_ids, null)\n  }\n\n  default_node_pool {\n    name                 = var.system_node_pool.name\n    vm_size              = var.system_node_pool.vm_size\n    orchestrator_version = var.kubernetes_version\n    min_count            = var.system_node_pool.min_count\n    max_count            = var.system_node_pool.max_count\n    enable_auto_scaling  = true\n    os_sku               = var.system_node_pool.os_sku\n    os_disk_size_gb      = var.system_node_pool.os_disk_size_gb\n    node_labels          = var.system_node_pool.node_labels\n    node_taints          = var.system_node_pool.node_taints\n    zones                = var.system_node_pool.zones\n    upgrade_settings {\n      max_surge = "33%"\n    }\n  }\n\n  network_profile {\n    network_plugin    = var.network_profile.plugin\n    service_cidr      = var.network_profile.service_cidr\n    dns_service_ip    = var.network_profile.dns_service_ip\n    network_policy    = var.network_profile.network_policy\n    outbound_type     = var.network_profile.outbound_type\n    pod_cidr          = try(var.network_profile.pod_cidr, null)\n  }\n\n  api_server_access_profile {\n    authorized_ip_ranges = var.api_server_authorized_ip_ranges\n  }\n\n  azure_active_directory_role_based_access_control {\n    enabled                        = true\n    azure_rbac_enabled             = var.enable_azure_rbac\n    admin_group_object_ids         = var.aad_admin_group_object_ids\n  }\n\n  # Add-ons\n  dynamic "oms_agent" {\n    for_each = var.oms_workspace_resource_id == null ? [] : [1]\n    content {\n      log_analytics_workspace_id = var.oms_workspace_resource_id\n    }\n  }\n\n  azure_policy_enabled        = var.enable_azure_policy_addon\n  private_cluster_enabled     = var.private_cluster_enabled\n\n  sku_tier = "Paid" # Uptime SLA optional, anpassbar\n\n  tags = var.tags\n}\n\n# Additional User Node Pools\nresource "azurerm_kubernetes_cluster_node_pool" "user" {\n  for_each = { for p in var.user_node_pools : p.name => p }\n\n  kubernetes_cluster_id = azurerm_kubernetes_cluster.this.id\n  name                  = each.value.name\n  vm_size               = each.value.vm_size\n  orchestrator_version  = var.kubernetes_version\n  mode                  = try(each.value.mode, "User")\n  min_count             = each.value.min_count\n  max_count             = each.value.max_count\n  enable_auto_scaling   = true\n  os_disk_size_gb       = try(each.value.os_disk_size_gb, 128)\n  os_sku                = try(each.value.os_sku, "Ubuntu")\n  node_labels           = try(each.value.node_labels, {})\n  node_taints           = try(each.value.node_taints, [])\n  zones                 = try(each.value.zones, null)\n\n  tags = var.tags\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"modules/aks/outputs.tf"})})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'output "id" { value = azurerm_kubernetes_cluster.this.id }\noutput "kubelet_identity_principal_id" {\n  value = try(azurerm_kubernetes_cluster.this.kubelet_identity[0].object_id, null)\n}\noutput "principal_id" { # Cluster (control plane) MI bei SystemAssigned\n  value = try(azurerm_kubernetes_cluster.this.identity[0].principal_id, null)\n}\noutput "host" { value = azurerm_kubernetes_cluster.this.kube_config[0].host }\noutput "name" { value = azurerm_kubernetes_cluster.this.name }\n'})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"modules/aks/README.md"})})," (Short)"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-md",children:'Encapsulate inputs AKS details (RBAC, network, private cluster). Configure providers externally. Set role assignments (ACR pull, subnet/route table) externally.```\n\n---\n\n## \ud83d\udd01 Azure DevOps Pipeline (Terraform Plan/Apply, Multi\u2011Env)\n\n> Prerequisites\n>\n> * Azure DevOps **Service Connection** (ARM) with **Workload Identity/Federated Credentials** for Subscription/Resource Group.\n> * Azure Storage backend for Terraform State (container + blob locking via lease).\n> * Optional: Variable groups for `ARM_*`/backend parameters.\n\n**`azure-pipelines.yml`**\n\n```yaml\ntrigger:\n  branches:\n    include: [ main ]\npr:\n  branches:\n    include: [ main, feature/* ]\n\nvariables:\n  TF_VERSION: \'1.8.5\'\n  PROVIDER_AZURERM: \'~> 3.113\'\n  # Backend (can be set via variable group)\n  TF_BACKEND_RG: \'rg-tfstate\'\n  TF_BACKEND_SA: \'sttfstate1234\'\n  TF_BACKEND_CONTAINER: \'tfstate\'\n  TF_BACKEND_KEY: \'$(Build.Repository.Name).$(System.StageName).tfstate\'\n\nstages:\n- stage: Validate\n  displayName: "Validate & Security Checks"\n  jobs:\n  - job: validate\n    pool: { vmImage: \'ubuntu-latest\' }\n    steps:\n    - checkout: self\n    - task: Bash@3\n      displayName: "Install Terraform $(TF_VERSION)"\n      inputs:\n        targetType: \'inline\'\n        script: |\n          curl -sLo tf.zip https://releases.hashicorp.com/terraform/$(TF_VERSION)/terraform_$(TF_VERSION)_linux_amd64.zip\n          sudo unzip -o tf.zip -d /usr/local/bin\n          terraform -version\n    - task: Bash@3\n      displayName: "Terraform fmt & init"\n      env:\n        ARM_USE_OIDC: true\n      inputs:\n        targetType: \'inline\'\n        script: |\n          cd infra/env/dev\n          terraform init \\\n            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \\\n            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \\\n            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \\\n            -backend-config="key=$(TF_BACKEND_KEY)"\n          terraform fmt -check -recursive\n          terraform validate\n    - task: Bash@3\n      displayName: "tflint / tfsec"\n      inputs:\n        targetType: \'inline\'\n        script: |\n          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash\n          tflint --version\n          tflint -f compact || true\n          curl -sL https://raw.githubusercontent.com/aquasecurity/tfsec/master/scripts/install_linux.sh | bash\n          tfsec . || true\n\n- stage: Plan\n  displayName: "Plan (Dev)"\n  dependsOn: Validate\n  jobs:\n  - job: plan_dev\n    displayName: "terraform plan dev"\n    pool: { vmImage: \'ubuntu-latest\' }\n    steps:\n    - checkout: self\n    - task: AzureCLI@2\n      displayName: "Terraform init+plan (OIDC)"\n      inputs:\n        azureSubscription: \'AZURE-SP-WI\'   # Name of your service connection\n        scriptType: bash\n        scriptLocation: inlineScript\n        inlineScript: |\n          set -e\n          cd infra/env/dev\n          terraform init \\\n            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \\\n            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \\\n            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \\\n            -backend-config="key=$(TF_BACKEND_KEY)"\n          terraform workspace select dev || terraform workspace new dev\n          terraform plan -var-file=variables.tfvars -out=tfplan\n    - publish: infra/env/dev/tfplan\n      displayName: "Publish plan artifact"\n      artifact: tfplan-dev\n\n- stage: Apply\n  displayName: "Apply (Dev)"\n  dependsOn: Plan\n  condition: and(succeeded(), eq(variables[\'Build.SourceBranch\'], \'refs/heads/main\'))\n  jobs:\n  - deployment: apply_dev\n    displayName: "terraform apply dev"\n    environment: dev # optional: protect environments with approvals\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - checkout: self\n          - task: AzureCLI@2\n            displayName: "Terraform init+apply"\n            inputs:\n              azureSubscription: \'AZURE-SP-WI\'\n              scriptType: bash\n              scriptLocation: inlineScript\n              inlineScript: |\n                set -e\n                cd infra/env/dev\n                terraform init \\\n                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" \\\n                  -backend-config="storage_account_name=$(TF_BACKEND_SA)" \\\n                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \\\n                  -backend-config="key=$(TF_BACKEND_KEY)"\n                terraform workspace select dev || terraform workspace new dev\n                terraform apply -auto-approve tfplan\n\n- stage: Plan_Prod\n  displayName: "Plan (Prod)"\n  dependsOn: Apply\n  condition: and(succeeded(), eq(variables[\'Build.SourceBranch\'], \'refs/heads/main\'))\n  jobs:\n  - job: plan_prod\n    pool: { vmImage: \'ubuntu-latest\' }\n    steps:\n    - checkout: self\n    - task: AzureCLI@2\n      displayName: "Plan prod"\n      inputs:\n        azureSubscription: \'AZURE-SP-WI\'\n        scriptType: bash\n        scriptLocation: inlineScript\n        inlineScript: |\n          set -e\n          cd infra/env/prod\n          terraform init \\\n            -backend-config="resource_group_name=$(TF_BACKEND_RG)" \\\n            -backend-config="storage_account_name=$(TF_BACKEND_SA)" \\\n            -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \\\n            -backend-config="key=$(TF_BACKEND_KEY)"\n          terraform workspace select prod || terraform workspace new prod\n          terraform plan -var-file=variables.tfvars -out=tfplan\n    - publish: infra/env/prod/tfplan\n      artifact: tfplan-prod\n\n- stage: Apply_Prod\n  displayName: "Apply (Prod)"\n  dependsOn: Plan_Prod\n  condition: and(succeeded(), eq(variables[\'Build.SourceBranch\'], \'refs/heads/main\'))\n  jobs:\n  - deployment: apply_prod\n    displayName: "terraform apply prod"\n    environment: prod # Enforce manual approval in ADO Environment\n    strategy:\n      runOnce:\n        deploy:\n          steps:\n          - checkout: self\n          - task: AzureCLI@2\n            displayName: "Apply prod"\n            inputs:\n              azureSubscription: \'AZURE-SP-WI\'\n              scriptType: bash\n              scriptLocation: inlineScript\n              inlineScript: |\n                set -e\n                cd infra/env/prod\n                terraform init \\\n                  -backend-config="resource_group_name=$(TF_BACKEND_RG)" \\\n                  -backend-config="storage_account_name=$(TF_BACKEND_SA)" \\\n                  -backend-config="container_name=$(TF_BACKEND_CONTAINER)" \\\n                  -backend-config="key=$(TF_BACKEND_KEY)"\n                terraform workspace select prod || terraform workspace new prod\n                terraform apply -auto-approve tfplan\n'})}),"\n",(0,i.jsx)(n.h3,{id:"notes--best-practices",children:"Notes & Best Practices"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"OIDC/Federated Credentials:"})," Configure Service Connection so that no secret is required (no service principal password in the repo)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"State per Stage:"})," The key ",(0,i.jsx)(n.code,{children:"$(System.StageName)"})," in the backend cleanly separates dev/prod."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Security Scans:"})," ",(0,i.jsx)(n.code,{children:"tflint"}),"/",(0,i.jsx)(n.code,{children:"tfsec"})," are ",(0,i.jsx)(n.code,{children:"|| true"})," so that warnings do not hard break the build \u2013 optionally enforce in prod."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Approvals:"})," Use Azure DevOps ",(0,i.jsx)(n.strong,{children:"Environments"})," for manual approvals between stages."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parallel Envs:"})," For multiple envs, use ",(0,i.jsx)(n.code,{children:"strategy: matrix"})," in Plan/Apply or define envs as separate stages."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"-example-using-the-aks-module-in-infraenvdevmaintf",children:["\ud83d\udd17 Example: Using the AKS module in ",(0,i.jsx)(n.code,{children:"infra/env/dev/main.tf"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-hcl",children:'terraform {\n  required_version = ">= 1.8.0"\n  required_providers {\n    azurerm = {\n      source  = "hashicorp/azurerm"\n      version = "~> 3.113"\n    }\n  }\n  backend "azurerm" {}\n}\n\nprovider "azurerm" {\n  features {}\n  use_oidc = true\n}\n\nlocals {\n  tags = {\n    env   = "dev"\n    owner = "platform"\n  }\n}\n\nresource "azurerm_resource_group" "rg" {\n  name     = "rg-aks-dev"\n  location = var.location\n  tags     = local.tags\n}\n\nmodule "aks" {\n  source              = "../../modules/aks"\n  name                = "aks-dev-core"\n  location            = var.location\n  resource_group_name = azurerm_resource_group.rg.name\n  kubernetes_version  = var.k8s_version\n  tags                = local.tags\n\n  identity_type = "system"\n\n  network_profile = {\n    plugin         = "azure"\n    service_cidr   = "10.50.0.0/16"\n    dns_service_ip = "10.50.0.10"\n    outbound_type  = "managedNATGateway"\n    network_policy = "azure"\n  }\n\n  aad_admin_group_object_ids = var.aad_admin_groups\n  enable_azure_rbac          = true\n\n  private_cluster_enabled           = false\n  api_server_authorized_ip_ranges   = []\n\n  system_node_pool = {\n    name      = "sys"\n    vm_size   = "Standard_D4s_v5"\n    min_count = 1\n    max_count = 2\n    node_labels = {\n      "kubernetes.azure.com/mode" = "system"\n    }\n  }\n\n  user_node_pools = [\n    {\n      name      = "user"\n      vm_size   = "Standard_D8s_v5"\n      min_count = 2\n      max_count = 6\n      node_labels = {\n        "kubernetes.azure.com/mode" = "user"\n      }\n    }\n  ]\n}\n\n# Example: ACR + Role Assignment (outside the module)\nresource "azurerm_container_registry" "acr" {\n  name                = "acrdevexample1234"\n  resource_group_name = azurerm_resource_group.rg.name\n  location            = var.location\n  sku                 = "Standard"\n  admin_enabled       = false\n  tags                = local.tags\n}\n\nresource "azurerm_role_assignment" "kubelet_acr_pull" {\n  scope                = azurerm_container_registry.acr.id\n  role_definition_name = "AcrPull"\n  principal_id         = module.aks.kubelet_identity_principal_id\n}\n'})})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},7293:(e,n,r)=>{r.d(n,{A:()=>I});var s=r(6540),i=r(4848);function t(e){const{mdxAdmonitionTitle:n,rest:r}=function(e){const n=s.Children.toArray(e),r=n.find(e=>s.isValidElement(e)&&"mdxAdmonitionTitle"===e.type),t=n.filter(e=>e!==r),a=r?.props.children;return{mdxAdmonitionTitle:a,rest:t.length>0?(0,i.jsx)(i.Fragment,{children:t}):null}}(e.children),t=e.title??n;return{...e,...t&&{title:t},children:r}}var a=r(4164),o=r(1312),l=r(7559);const c="admonition_xJq3",d="admonitionHeading_Gvgb",u="admonitionIcon_Rf37",p="admonitionContent_BuS1";function m({type:e,className:n,children:r}){return(0,i.jsx)("div",{className:(0,a.A)(l.G.common.admonition,l.G.common.admonitionType(e),c,n),children:r})}function _({icon:e,title:n}){return(0,i.jsxs)("div",{className:d,children:[(0,i.jsx)("span",{className:u,children:e}),n]})}function h({children:e}){return e?(0,i.jsx)("div",{className:p,children:e}):null}function g(e){const{type:n,icon:r,title:s,children:t,className:a}=e;return(0,i.jsxs)(m,{type:n,className:a,children:[s||r?(0,i.jsx)(_,{title:s,icon:r}):null,(0,i.jsx)(h,{children:t})]})}function v(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})})}const b={icon:(0,i.jsx)(v,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.note",description:"The default label used for the Note admonition (:::note)",children:"note"})};function f(e){return(0,i.jsx)(g,{...b,...e,className:(0,a.A)("alert alert--secondary",e.className),children:e.children})}function x(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})})}const y={icon:(0,i.jsx)(x,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.tip",description:"The default label used for the Tip admonition (:::tip)",children:"tip"})};function j(e){return(0,i.jsx)(g,{...y,...e,className:(0,a.A)("alert alert--success",e.className),children:e.children})}function k(e){return(0,i.jsx)("svg",{viewBox:"0 0 14 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"})})}const A={icon:(0,i.jsx)(k,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.info",description:"The default label used for the Info admonition (:::info)",children:"info"})};function N(e){return(0,i.jsx)(g,{...A,...e,className:(0,a.A)("alert alert--info",e.className),children:e.children})}function w(e){return(0,i.jsx)("svg",{viewBox:"0 0 16 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"})})}const z={icon:(0,i.jsx)(w,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.warning",description:"The default label used for the Warning admonition (:::warning)",children:"warning"})};function C(e){return(0,i.jsx)("svg",{viewBox:"0 0 12 16",...e,children:(0,i.jsx)("path",{fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"})})}const S={icon:(0,i.jsx)(C,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.danger",description:"The default label used for the Danger admonition (:::danger)",children:"danger"})};const T={icon:(0,i.jsx)(w,{}),title:(0,i.jsx)(o.A,{id:"theme.admonition.caution",description:"The default label used for the Caution admonition (:::caution)",children:"caution"})};const R={...{note:f,tip:j,info:N,warning:function(e){return(0,i.jsx)(g,{...z,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})},danger:function(e){return(0,i.jsx)(g,{...S,...e,className:(0,a.A)("alert alert--danger",e.className),children:e.children})}},...{secondary:e=>(0,i.jsx)(f,{title:"secondary",...e}),important:e=>(0,i.jsx)(N,{title:"important",...e}),success:e=>(0,i.jsx)(j,{title:"success",...e}),caution:function(e){return(0,i.jsx)(g,{...T,...e,className:(0,a.A)("alert alert--warning",e.className),children:e.children})}}};function I(e){const n=t(e),r=(s=n.type,R[s]||(console.warn(`No admonition component found for admonition type "${s}". Using Info as fallback.`),R.info));var s;return(0,i.jsx)(r,{...n})}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function a(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);